#include "StdAfx.h"
#include "ExciteBikeSAMAudioDecompression.h"
#include <algorithm>
#include "SharedFunctions.h"

//static std::vector<unsigned long> addressesWrite;
//static std::vector<unsigned long> addresses;
//static std::vector<unsigned long> addressesValues;

CExciteBikeSAMAudioDecompression::CExciteBikeSAMAudioDecompression(void)
{
}

CExciteBikeSAMAudioDecompression::~CExciteBikeSAMAudioDecompression(void)
{
}

static unsigned short table800DC654[114] = 
{
	0x000D, 0x000E, 0x0010, 0x0011, 0x0013, 0x0015, 0x1410, 0x0C08, 
	0x04FE, 0xFEFE, 0xFEFE, 0xFEFE, 0x0408, 0x0C10, 0x1410, 0x0C08, 
	0x04FE, 0xFEFE,

	0x0007, 0x0008, 0x0009, 0x000A, 0x000B, 0x000C, 0x000D, 0x000E,
	0x0010, 0x0011, 0x0013, 0x0015, 0x0017, 0x0019, 0x001C, 0x001F,
	0x0022, 0x0025, 0x0029, 0x002D, 0x0032, 0x0037, 0x003C, 0x0042,
	0x0049, 0x0050, 0x0058, 0x0061, 0x006B, 0x0076, 0x0082, 0x008F,
	0x009D, 0x00AD, 0x00BE, 0x00D1, 0x00E6, 0x00FD, 0x0117, 0x0133,
	0x0151, 0x0173, 0x0198, 0x01C1, 0x01EE, 0x0220, 0x0256, 0x0292,
	0x02D4, 0x031C, 0x036C, 0x03C3, 0x0424, 0x048E, 0x0502, 0x0583,
	0x0610, 0x06AB, 0x0756, 0x0812, 0x08E0, 0x09C3, 0x0ABD, 0x0BD0,
	0x0CFF, 0x0E4C, 0x0FBA, 0x114C, 0x1307, 0x14EE, 0x1706, 0x1954,
	0x1BDC, 0x1EA5, 0x21B6, 0x2515, 0x28CA, 0x2CDF, 0x315B, 0x364B,
	0x3BB9, 0x41B2, 0x4844, 0x4F7E, 0x5771, 0x602F, 0x69CE, 0x7462,
	0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF
};

static unsigned short table800DCF68[0x10] = 
{
	0x0100,
	0x0000,
	0x0200,
	0xFF00,
	0x0000,
	0x0000,
	0x00C0,
	0x0040,
	0x00F0,
	0x0000,
	0x01CC,
	0xFF30,
	0x0188,
	0xFF18,
	0x00E6,
	0x00E6
};

static unsigned short table800DCF84[0x10] =
{
	0x00E6,
	0x00E6,
	0x00E6,
	0x00E6,
	0x0133,
	0x0199,
	0x0200,
	0x0266,
	0x0300,
	0x0266,
	0x0200,
	0x0199,
	0x0133,
	0x00E6,
	0x00E6,
	0x00E6
};

static unsigned char outputSoundByteLookup[8192] =
{
    0x00, 0x01, 0x01, 0x02, 0x03, 0x03, 0x04, 0x04, 0x05, 0x05, 0x06, 0x06, 0x07, 0x07, 0x08, 0x08, 
    0x09, 0x09, 0x09, 0x0A, 0x0A, 0x0B, 0x0B, 0x0C, 0x0C, 0x0C, 0x0D, 0x0D, 0x0E, 0x0E, 0x0E, 0x0F, 
    0x0F, 0x0F, 0x10, 0x10, 0x10, 0x11, 0x11, 0x11, 0x12, 0x12, 0x12, 0x13, 0x13, 0x13, 0x14, 0x14, 
    0x14, 0x15, 0x15, 0x15, 0x15, 0x16, 0x16, 0x16, 0x17, 0x17, 0x17, 0x17, 0x18, 0x18, 0x18, 0x18, 
    0x19, 0x19, 0x19, 0x19, 0x1A, 0x1A, 0x1A, 0x1A, 0x1B, 0x1B, 0x1B, 0x1B, 0x1C, 0x1C, 0x1C, 0x1C, 
    0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1E, 0x1E, 0x1E, 0x1E, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x20, 0x20, 
    0x20, 0x20, 0x20, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x22, 0x22, 0x22, 0x22, 0x22, 0x23, 0x23, 
    0x23, 0x23, 0x23, 0x23, 0x24, 0x24, 0x24, 0x24, 0x24, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x26, 
    0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x28, 0x28, 0x28, 0x28, 
    0x28, 0x28, 0x28, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 
    0x2A, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 
    0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 
    0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 
    0x30, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 
    0x32, 0x32, 0x32, 0x32, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x34, 0x34, 0x34, 
    0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 
    0x35, 0x35, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x37, 0x37, 
    0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 
    0x38, 0x38, 0x38, 0x38, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 
    0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3B, 0x3B, 0x3B, 0x3B, 
    0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 
    0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 
    0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 
    0x3E, 0x3E, 0x3E, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 
    0x3F, 0x3F, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 
    0x40, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 
    0x41, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 
    0x42, 0x42, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 
    0x43, 0x43, 0x43, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 
    0x44, 0x44, 0x44, 0x44, 0x44, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 
    0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 
    0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 
    0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x48, 0x48, 
    0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 
    0x48, 0x48, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 
    0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 
    0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4B, 0x4B, 0x4B, 
    0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 
    0x4B, 0x4B, 0x4B, 0x4B, 0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 
    0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 
    0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 
    0x4D, 0x4D, 0x4D, 0x4D, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 
    0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4F, 0x4F, 0x4F, 
    0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 
    0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 
    0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 
    0x50, 0x50, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 
    0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x52, 0x52, 
    0x52, 0x52, 0x52, 0x52, 0x52, 0x52, 0x52, 0x52, 0x52, 0x52, 0x52, 0x52, 0x52, 0x52, 0x52, 0x52, 
    0x52, 0x52, 0x52, 0x52, 0x52, 0x52, 0x52, 0x52, 0x52, 0x52, 0x52, 0x53, 0x53, 0x53, 0x53, 0x53, 
    0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 
    0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x54, 0x54, 0x54, 0x54, 0x54, 0x54, 0x54, 
    0x54, 0x54, 0x54, 0x54, 0x54, 0x54, 0x54, 0x54, 0x54, 0x54, 0x54, 0x54, 0x54, 0x54, 0x54, 0x54, 
    0x54, 0x54, 0x54, 0x54, 0x54, 0x54, 0x54, 0x54, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 
    0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 
    0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x56, 0x56, 0x56, 0x56, 0x56, 0x56, 0x56, 0x56, 
    0x56, 0x56, 0x56, 0x56, 0x56, 0x56, 0x56, 0x56, 0x56, 0x56, 0x56, 0x56, 0x56, 0x56, 0x56, 0x56, 
    0x56, 0x56, 0x56, 0x56, 0x56, 0x56, 0x56, 0x56, 0x56, 0x56, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 
    0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 
    0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x58, 0x58, 0x58, 0x58, 
    0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 
    0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 
    0x59, 0x59, 0x59, 0x59, 0x59, 0x59, 0x59, 0x59, 0x59, 0x59, 0x59, 0x59, 0x59, 0x59, 0x59, 0x59, 
    0x59, 0x59, 0x59, 0x59, 0x59, 0x59, 0x59, 0x59, 0x59, 0x59, 0x59, 0x59, 0x59, 0x59, 0x59, 0x59, 
    0x59, 0x59, 0x59, 0x59, 0x59, 0x5A, 0x5A, 0x5A, 0x5A, 0x5A, 0x5A, 0x5A, 0x5A, 0x5A, 0x5A, 0x5A, 
    0x5A, 0x5A, 0x5A, 0x5A, 0x5A, 0x5A, 0x5A, 0x5A, 0x5A, 0x5A, 0x5A, 0x5A, 0x5A, 0x5A, 0x5A, 0x5A, 
    0x5A, 0x5A, 0x5A, 0x5A, 0x5A, 0x5A, 0x5A, 0x5A, 0x5A, 0x5A, 0x5A, 0x5B, 0x5B, 0x5B, 0x5B, 0x5B, 
    0x5B, 0x5B, 0x5B, 0x5B, 0x5B, 0x5B, 0x5B, 0x5B, 0x5B, 0x5B, 0x5B, 0x5B, 0x5B, 0x5B, 0x5B, 0x5B, 
    0x5B, 0x5B, 0x5B, 0x5B, 0x5B, 0x5B, 0x5B, 0x5B, 0x5B, 0x5B, 0x5B, 0x5B, 0x5B, 0x5B, 0x5B, 0x5B, 
    0x5B, 0x5B, 0x5B, 0x5C, 0x5C, 0x5C, 0x5C, 0x5C, 0x5C, 0x5C, 0x5C, 0x5C, 0x5C, 0x5C, 0x5C, 0x5C, 
    0x5C, 0x5C, 0x5C, 0x5C, 0x5C, 0x5C, 0x5C, 0x5C, 0x5C, 0x5C, 0x5C, 0x5C, 0x5C, 0x5C, 0x5C, 0x5C, 
    0x5C, 0x5C, 0x5C, 0x5C, 0x5C, 0x5C, 0x5C, 0x5C, 0x5C, 0x5C, 0x5C, 0x5C, 0x5D, 0x5D, 0x5D, 0x5D, 
    0x5D, 0x5D, 0x5D, 0x5D, 0x5D, 0x5D, 0x5D, 0x5D, 0x5D, 0x5D, 0x5D, 0x5D, 0x5D, 0x5D, 0x5D, 0x5D, 
    0x5D, 0x5D, 0x5D, 0x5D, 0x5D, 0x5D, 0x5D, 0x5D, 0x5D, 0x5D, 0x5D, 0x5D, 0x5D, 0x5D, 0x5D, 0x5D, 
    0x5D, 0x5D, 0x5D, 0x5D, 0x5D, 0x5D, 0x5D, 0x5E, 0x5E, 0x5E, 0x5E, 0x5E, 0x5E, 0x5E, 0x5E, 0x5E, 
    0x5E, 0x5E, 0x5E, 0x5E, 0x5E, 0x5E, 0x5E, 0x5E, 0x5E, 0x5E, 0x5E, 0x5E, 0x5E, 0x5E, 0x5E, 0x5E, 
    0x5E, 0x5E, 0x5E, 0x5E, 0x5E, 0x5E, 0x5E, 0x5E, 0x5E, 0x5E, 0x5E, 0x5E, 0x5E, 0x5E, 0x5E, 0x5E, 
    0x5E, 0x5E, 0x5E, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 
    0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 
    0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 
    0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 
    0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 
    0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 
    0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 
    0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 
    0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 
    0x61, 0x62, 0x62, 0x62, 0x62, 0x62, 0x62, 0x62, 0x62, 0x62, 0x62, 0x62, 0x62, 0x62, 0x62, 0x62, 
    0x62, 0x62, 0x62, 0x62, 0x62, 0x62, 0x62, 0x62, 0x62, 0x62, 0x62, 0x62, 0x62, 0x62, 0x62, 0x62, 
    0x62, 0x62, 0x62, 0x62, 0x62, 0x62, 0x62, 0x62, 0x62, 0x62, 0x62, 0x62, 0x62, 0x62, 0x62, 0x62, 
    0x62, 0x62, 0x62, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 
    0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 
    0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 
    0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 
    0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 
    0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 
    0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x65, 0x65, 
    0x65, 0x65, 0x65, 0x65, 0x65, 0x65, 0x65, 0x65, 0x65, 0x65, 0x65, 0x65, 0x65, 0x65, 0x65, 0x65, 
    0x65, 0x65, 0x65, 0x65, 0x65, 0x65, 0x65, 0x65, 0x65, 0x65, 0x65, 0x65, 0x65, 0x65, 0x65, 0x65, 
    0x65, 0x65, 0x65, 0x65, 0x65, 0x65, 0x65, 0x65, 0x65, 0x65, 0x65, 0x65, 0x65, 0x65, 0x65, 0x65, 
    0x65, 0x65, 0x65, 0x65, 0x65, 0x65, 0x65, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 
    0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 
    0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 
    0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 
    0x66, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 
    0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 
    0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 
    0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x68, 0x68, 
    0x68, 0x68, 0x68, 0x68, 0x68, 0x68, 0x68, 0x68, 0x68, 0x68, 0x68, 0x68, 0x68, 0x68, 0x68, 0x68, 
    0x68, 0x68, 0x68, 0x68, 0x68, 0x68, 0x68, 0x68, 0x68, 0x68, 0x68, 0x68, 0x68, 0x68, 0x68, 0x68, 
    0x68, 0x68, 0x68, 0x68, 0x68, 0x68, 0x68, 0x68, 0x68, 0x68, 0x68, 0x68, 0x68, 0x68, 0x68, 0x68, 
    0x68, 0x68, 0x68, 0x68, 0x68, 0x68, 0x68, 0x68, 0x68, 0x68, 0x68, 0x68, 0x69, 0x69, 0x69, 0x69, 
    0x69, 0x69, 0x69, 0x69, 0x69, 0x69, 0x69, 0x69, 0x69, 0x69, 0x69, 0x69, 0x69, 0x69, 0x69, 0x69, 
    0x69, 0x69, 0x69, 0x69, 0x69, 0x69, 0x69, 0x69, 0x69, 0x69, 0x69, 0x69, 0x69, 0x69, 0x69, 0x69, 
    0x69, 0x69, 0x69, 0x69, 0x69, 0x69, 0x69, 0x69, 0x69, 0x69, 0x69, 0x69, 0x69, 0x69, 0x69, 0x69, 
    0x69, 0x69, 0x69, 0x69, 0x69, 0x69, 0x69, 0x69, 0x69, 0x69, 0x69, 0x69, 0x69, 0x6A, 0x6A, 0x6A, 
    0x6A, 0x6A, 0x6A, 0x6A, 0x6A, 0x6A, 0x6A, 0x6A, 0x6A, 0x6A, 0x6A, 0x6A, 0x6A, 0x6A, 0x6A, 0x6A, 
    0x6A, 0x6A, 0x6A, 0x6A, 0x6A, 0x6A, 0x6A, 0x6A, 0x6A, 0x6A, 0x6A, 0x6A, 0x6A, 0x6A, 0x6A, 0x6A, 
    0x6A, 0x6A, 0x6A, 0x6A, 0x6A, 0x6A, 0x6A, 0x6A, 0x6A, 0x6A, 0x6A, 0x6A, 0x6A, 0x6A, 0x6A, 0x6A, 
    0x6A, 0x6A, 0x6A, 0x6A, 0x6A, 0x6A, 0x6A, 0x6A, 0x6A, 0x6A, 0x6A, 0x6A, 0x6A, 0x6A, 0x6A, 0x6A, 
    0x6B, 0x6B, 0x6B, 0x6B, 0x6B, 0x6B, 0x6B, 0x6B, 0x6B, 0x6B, 0x6B, 0x6B, 0x6B, 0x6B, 0x6B, 0x6B, 
    0x6B, 0x6B, 0x6B, 0x6B, 0x6B, 0x6B, 0x6B, 0x6B, 0x6B, 0x6B, 0x6B, 0x6B, 0x6B, 0x6B, 0x6B, 0x6B, 
    0x6B, 0x6B, 0x6B, 0x6B, 0x6B, 0x6B, 0x6B, 0x6B, 0x6B, 0x6B, 0x6B, 0x6B, 0x6B, 0x6B, 0x6B, 0x6B, 
    0x6B, 0x6B, 0x6B, 0x6B, 0x6B, 0x6B, 0x6B, 0x6B, 0x6B, 0x6B, 0x6B, 0x6B, 0x6B, 0x6B, 0x6B, 0x6B, 
    0x6B, 0x6B, 0x6B, 0x6B, 0x6B, 0x6B, 0x6C, 0x6C, 0x6C, 0x6C, 0x6C, 0x6C, 0x6C, 0x6C, 0x6C, 0x6C, 
    0x6C, 0x6C, 0x6C, 0x6C, 0x6C, 0x6C, 0x6C, 0x6C, 0x6C, 0x6C, 0x6C, 0x6C, 0x6C, 0x6C, 0x6C, 0x6C, 
    0x6C, 0x6C, 0x6C, 0x6C, 0x6C, 0x6C, 0x6C, 0x6C, 0x6C, 0x6C, 0x6C, 0x6C, 0x6C, 0x6C, 0x6C, 0x6C, 
    0x6C, 0x6C, 0x6C, 0x6C, 0x6C, 0x6C, 0x6C, 0x6C, 0x6C, 0x6C, 0x6C, 0x6C, 0x6C, 0x6C, 0x6C, 0x6C, 
    0x6C, 0x6C, 0x6C, 0x6C, 0x6C, 0x6C, 0x6C, 0x6C, 0x6C, 0x6C, 0x6C, 0x6C, 0x6C, 0x6C, 0x6D, 0x6D, 
    0x6D, 0x6D, 0x6D, 0x6D, 0x6D, 0x6D, 0x6D, 0x6D, 0x6D, 0x6D, 0x6D, 0x6D, 0x6D, 0x6D, 0x6D, 0x6D, 
    0x6D, 0x6D, 0x6D, 0x6D, 0x6D, 0x6D, 0x6D, 0x6D, 0x6D, 0x6D, 0x6D, 0x6D, 0x6D, 0x6D, 0x6D, 0x6D, 
    0x6D, 0x6D, 0x6D, 0x6D, 0x6D, 0x6D, 0x6D, 0x6D, 0x6D, 0x6D, 0x6D, 0x6D, 0x6D, 0x6D, 0x6D, 0x6D, 
    0x6D, 0x6D, 0x6D, 0x6D, 0x6D, 0x6D, 0x6D, 0x6D, 0x6D, 0x6D, 0x6D, 0x6D, 0x6D, 0x6D, 0x6D, 0x6D, 
    0x6D, 0x6D, 0x6D, 0x6D, 0x6D, 0x6D, 0x6D, 0x6D, 0x6E, 0x6E, 0x6E, 0x6E, 0x6E, 0x6E, 0x6E, 0x6E, 
    0x6E, 0x6E, 0x6E, 0x6E, 0x6E, 0x6E, 0x6E, 0x6E, 0x6E, 0x6E, 0x6E, 0x6E, 0x6E, 0x6E, 0x6E, 0x6E, 
    0x6E, 0x6E, 0x6E, 0x6E, 0x6E, 0x6E, 0x6E, 0x6E, 0x6E, 0x6E, 0x6E, 0x6E, 0x6E, 0x6E, 0x6E, 0x6E, 
    0x6E, 0x6E, 0x6E, 0x6E, 0x6E, 0x6E, 0x6E, 0x6E, 0x6E, 0x6E, 0x6E, 0x6E, 0x6E, 0x6E, 0x6E, 0x6E, 
    0x6E, 0x6E, 0x6E, 0x6E, 0x6E, 0x6E, 0x6E, 0x6E, 0x6E, 0x6E, 0x6E, 0x6E, 0x6E, 0x6E, 0x6E, 0x6E, 
    0x6E, 0x6E, 0x6E, 0x6E, 0x6E, 0x6E, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 
    0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 
    0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 
    0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 
    0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 
    0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x6F, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 
    0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 
    0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 
    0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 
    0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 
    0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x71, 0x71, 0x71, 0x71, 0x71, 0x71, 0x71, 
    0x71, 0x71, 0x71, 0x71, 0x71, 0x71, 0x71, 0x71, 0x71, 0x71, 0x71, 0x71, 0x71, 0x71, 0x71, 0x71, 
    0x71, 0x71, 0x71, 0x71, 0x71, 0x71, 0x71, 0x71, 0x71, 0x71, 0x71, 0x71, 0x71, 0x71, 0x71, 0x71, 
    0x71, 0x71, 0x71, 0x71, 0x71, 0x71, 0x71, 0x71, 0x71, 0x71, 0x71, 0x71, 0x71, 0x71, 0x71, 0x71, 
    0x71, 0x71, 0x71, 0x71, 0x71, 0x71, 0x71, 0x71, 0x71, 0x71, 0x71, 0x71, 0x71, 0x71, 0x71, 0x71, 
    0x71, 0x71, 0x71, 0x71, 0x71, 0x71, 0x71, 0x71, 0x71, 0x71, 0x71, 0x71, 0x71, 0x71, 0x72, 0x72, 
    0x72, 0x72, 0x72, 0x72, 0x72, 0x72, 0x72, 0x72, 0x72, 0x72, 0x72, 0x72, 0x72, 0x72, 0x72, 0x72, 
    0x72, 0x72, 0x72, 0x72, 0x72, 0x72, 0x72, 0x72, 0x72, 0x72, 0x72, 0x72, 0x72, 0x72, 0x72, 0x72, 
    0x72, 0x72, 0x72, 0x72, 0x72, 0x72, 0x72, 0x72, 0x72, 0x72, 0x72, 0x72, 0x72, 0x72, 0x72, 0x72, 
    0x72, 0x72, 0x72, 0x72, 0x72, 0x72, 0x72, 0x72, 0x72, 0x72, 0x72, 0x72, 0x72, 0x72, 0x72, 0x72, 
    0x72, 0x72, 0x72, 0x72, 0x72, 0x72, 0x72, 0x72, 0x72, 0x72, 0x72, 0x72, 0x72, 0x72, 0x72, 0x72, 
    0x72, 0x72, 0x72, 0x72, 0x72, 0x72, 0x72, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 
    0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 
    0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 
    0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 
    0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 
    0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 
    0x73, 0x73, 0x73, 0x74, 0x74, 0x74, 0x74, 0x74, 0x74, 0x74, 0x74, 0x74, 0x74, 0x74, 0x74, 0x74, 
    0x74, 0x74, 0x74, 0x74, 0x74, 0x74, 0x74, 0x74, 0x74, 0x74, 0x74, 0x74, 0x74, 0x74, 0x74, 0x74, 
    0x74, 0x74, 0x74, 0x74, 0x74, 0x74, 0x74, 0x74, 0x74, 0x74, 0x74, 0x74, 0x74, 0x74, 0x74, 0x74, 
    0x74, 0x74, 0x74, 0x74, 0x74, 0x74, 0x74, 0x74, 0x74, 0x74, 0x74, 0x74, 0x74, 0x74, 0x74, 0x74, 
    0x74, 0x74, 0x74, 0x74, 0x74, 0x74, 0x74, 0x74, 0x74, 0x74, 0x74, 0x74, 0x74, 0x74, 0x74, 0x74, 
    0x74, 0x74, 0x74, 0x74, 0x74, 0x74, 0x74, 0x74, 0x74, 0x74, 0x74, 0x74, 0x74, 0x74, 0x74, 0x74, 
    0x74, 0x74, 0x74, 0x75, 0x75, 0x75, 0x75, 0x75, 0x75, 0x75, 0x75, 0x75, 0x75, 0x75, 0x75, 0x75, 
    0x75, 0x75, 0x75, 0x75, 0x75, 0x75, 0x75, 0x75, 0x75, 0x75, 0x75, 0x75, 0x75, 0x75, 0x75, 0x75, 
    0x75, 0x75, 0x75, 0x75, 0x75, 0x75, 0x75, 0x75, 0x75, 0x75, 0x75, 0x75, 0x75, 0x75, 0x75, 0x75, 
    0x75, 0x75, 0x75, 0x75, 0x75, 0x75, 0x75, 0x75, 0x75, 0x75, 0x75, 0x75, 0x75, 0x75, 0x75, 0x75, 
    0x75, 0x75, 0x75, 0x75, 0x75, 0x75, 0x75, 0x75, 0x75, 0x75, 0x75, 0x75, 0x75, 0x75, 0x75, 0x75, 
    0x75, 0x75, 0x75, 0x75, 0x75, 0x75, 0x75, 0x75, 0x75, 0x75, 0x75, 0x75, 0x75, 0x75, 0x75, 0x75, 
    0x75, 0x75, 0x75, 0x75, 0x75, 0x75, 0x76, 0x76, 0x76, 0x76, 0x76, 0x76, 0x76, 0x76, 0x76, 0x76, 
    0x76, 0x76, 0x76, 0x76, 0x76, 0x76, 0x76, 0x76, 0x76, 0x76, 0x76, 0x76, 0x76, 0x76, 0x76, 0x76, 
    0x76, 0x76, 0x76, 0x76, 0x76, 0x76, 0x76, 0x76, 0x76, 0x76, 0x76, 0x76, 0x76, 0x76, 0x76, 0x76, 
    0x76, 0x76, 0x76, 0x76, 0x76, 0x76, 0x76, 0x76, 0x76, 0x76, 0x76, 0x76, 0x76, 0x76, 0x76, 0x76, 
    0x76, 0x76, 0x76, 0x76, 0x76, 0x76, 0x76, 0x76, 0x76, 0x76, 0x76, 0x76, 0x76, 0x76, 0x76, 0x76, 
    0x76, 0x76, 0x76, 0x76, 0x76, 0x76, 0x76, 0x76, 0x76, 0x76, 0x76, 0x76, 0x76, 0x76, 0x76, 0x76, 
    0x76, 0x76, 0x76, 0x76, 0x76, 0x76, 0x76, 0x76, 0x76, 0x76, 0x76, 0x76, 0x77, 0x77, 0x77, 0x77, 
    0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 
    0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 
    0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 
    0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 
    0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 
    0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 
    0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 
    0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 
    0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 
    0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 
    0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 
    0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 
    0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 
    0x78, 0x78, 0x78, 0x79, 0x79, 0x79, 0x79, 0x79, 0x79, 0x79, 0x79, 0x79, 0x79, 0x79, 0x79, 0x79, 
    0x79, 0x79, 0x79, 0x79, 0x79, 0x79, 0x79, 0x79, 0x79, 0x79, 0x79, 0x79, 0x79, 0x79, 0x79, 0x79, 
    0x79, 0x79, 0x79, 0x79, 0x79, 0x79, 0x79, 0x79, 0x79, 0x79, 0x79, 0x79, 0x79, 0x79, 0x79, 0x79, 
    0x79, 0x79, 0x79, 0x79, 0x79, 0x79, 0x79, 0x79, 0x79, 0x79, 0x79, 0x79, 0x79, 0x79, 0x79, 0x79, 
    0x79, 0x79, 0x79, 0x79, 0x79, 0x79, 0x79, 0x79, 0x79, 0x79, 0x79, 0x79, 0x79, 0x79, 0x79, 0x79, 
    0x79, 0x79, 0x79, 0x79, 0x79, 0x79, 0x79, 0x79, 0x79, 0x79, 0x79, 0x79, 0x79, 0x79, 0x79, 0x79, 
    0x79, 0x79, 0x79, 0x79, 0x79, 0x79, 0x79, 0x79, 0x79, 0x79, 0x79, 0x79, 0x79, 0x79, 0x79, 0x79, 
    0x79, 0x79, 0x79, 0x79, 0x79, 0x7A, 0x7A, 0x7A, 0x7A, 0x7A, 0x7A, 0x7A, 0x7A, 0x7A, 0x7A, 0x7A, 
    0x7A, 0x7A, 0x7A, 0x7A, 0x7A, 0x7A, 0x7A, 0x7A, 0x7A, 0x7A, 0x7A, 0x7A, 0x7A, 0x7A, 0x7A, 0x7A, 
    0x7A, 0x7A, 0x7A, 0x7A, 0x7A, 0x7A, 0x7A, 0x7A, 0x7A, 0x7A, 0x7A, 0x7A, 0x7A, 0x7A, 0x7A, 0x7A, 
    0x7A, 0x7A, 0x7A, 0x7A, 0x7A, 0x7A, 0x7A, 0x7A, 0x7A, 0x7A, 0x7A, 0x7A, 0x7A, 0x7A, 0x7A, 0x7A, 
    0x7A, 0x7A, 0x7A, 0x7A, 0x7A, 0x7A, 0x7A, 0x7A, 0x7A, 0x7A, 0x7A, 0x7A, 0x7A, 0x7A, 0x7A, 0x7A, 
    0x7A, 0x7A, 0x7A, 0x7A, 0x7A, 0x7A, 0x7A, 0x7A, 0x7A, 0x7A, 0x7A, 0x7A, 0x7A, 0x7A, 0x7A, 0x7A, 
    0x7A, 0x7A, 0x7A, 0x7A, 0x7A, 0x7A, 0x7A, 0x7A, 0x7A, 0x7A, 0x7A, 0x7A, 0x7A, 0x7A, 0x7A, 0x7A, 
    0x7A, 0x7A, 0x7A, 0x7A, 0x7A, 0x7A, 0x7A, 0x7A, 0x7A, 0x7A, 0x7A, 0x7B, 0x7B, 0x7B, 0x7B, 0x7B, 
    0x7B, 0x7B, 0x7B, 0x7B, 0x7B, 0x7B, 0x7B, 0x7B, 0x7B, 0x7B, 0x7B, 0x7B, 0x7B, 0x7B, 0x7B, 0x7B, 
    0x7B, 0x7B, 0x7B, 0x7B, 0x7B, 0x7B, 0x7B, 0x7B, 0x7B, 0x7B, 0x7B, 0x7B, 0x7B, 0x7B, 0x7B, 0x7B, 
    0x7B, 0x7B, 0x7B, 0x7B, 0x7B, 0x7B, 0x7B, 0x7B, 0x7B, 0x7B, 0x7B, 0x7B, 0x7B, 0x7B, 0x7B, 0x7B, 
    0x7B, 0x7B, 0x7B, 0x7B, 0x7B, 0x7B, 0x7B, 0x7B, 0x7B, 0x7B, 0x7B, 0x7B, 0x7B, 0x7B, 0x7B, 0x7B, 
    0x7B, 0x7B, 0x7B, 0x7B, 0x7B, 0x7B, 0x7B, 0x7B, 0x7B, 0x7B, 0x7B, 0x7B, 0x7B, 0x7B, 0x7B, 0x7B, 
    0x7B, 0x7B, 0x7B, 0x7B, 0x7B, 0x7B, 0x7B, 0x7B, 0x7B, 0x7B, 0x7B, 0x7B, 0x7B, 0x7B, 0x7B, 0x7B, 
    0x7B, 0x7B, 0x7B, 0x7B, 0x7B, 0x7B, 0x7B, 0x7B, 0x7B, 0x7B, 0x7B, 0x7B, 0x7B, 0x7B, 0x7B, 0x7B, 
    0x7B, 0x7B, 0x7B, 0x7B, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 
    0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 
    0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 
    0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 
    0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 
    0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 
    0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 
    0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 
    0x7C, 0x7C, 0x7C, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 
    0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 
    0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 
    0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 
    0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 
    0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 
    0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 
    0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 
    0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 
    0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 
    0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 
    0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 
    0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 
    0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 
    0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 
    0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 
    0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7F, 0x7F, 0x7F, 
    0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 
    0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 
    0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 
    0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 
    0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 
    0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 
    0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 
    0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 
    0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 
    0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 
    0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 
    0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 
    0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 
    0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
    0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
    0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
    0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
    0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 
    0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 
    0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 
    0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 
    0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 
    0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 
    0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 
    0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 
    0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 
    0x81, 0x81, 0x81, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 
    0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 
    0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 
    0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 
    0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 
    0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 
    0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 
    0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 
    0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x83, 0x83, 0x83, 0x83, 0x83, 
    0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 
    0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 
    0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 
    0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 
    0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 
    0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 
    0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 
    0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x84, 0x84, 0x84, 
    0x84, 0x84, 0x84, 0x84, 0x84, 0x84, 0x84, 0x84, 0x84, 0x84, 0x84, 0x84, 0x84, 0x84, 0x84, 0x84, 
    0x84, 0x84, 0x84, 0x84, 0x84, 0x84, 0x84, 0x84, 0x84, 0x84, 0x84, 0x84, 0x84, 0x84, 0x84, 0x84, 
    0x84, 0x84, 0x84, 0x84, 0x84, 0x84, 0x84, 0x84, 0x84, 0x84, 0x84, 0x84, 0x84, 0x84, 0x84, 0x84, 
    0x84, 0x84, 0x84, 0x84, 0x84, 0x84, 0x84, 0x84, 0x84, 0x84, 0x84, 0x84, 0x84, 0x84, 0x84, 0x84, 
    0x84, 0x84, 0x84, 0x84, 0x84, 0x84, 0x84, 0x84, 0x84, 0x84, 0x84, 0x84, 0x84, 0x84, 0x84, 0x84, 
    0x84, 0x84, 0x84, 0x84, 0x84, 0x84, 0x84, 0x84, 0x84, 0x84, 0x84, 0x84, 0x84, 0x84, 0x84, 0x84, 
    0x84, 0x84, 0x84, 0x84, 0x84, 0x84, 0x84, 0x84, 0x84, 0x84, 0x84, 0x84, 0x84, 0x84, 0x84, 0x84, 
    0x84, 0x84, 0x84, 0x84, 0x84, 0x84, 0x84, 0x84, 0x84, 0x84, 0x84, 0x84, 0x85, 0x85, 0x85, 0x85, 
    0x85, 0x85, 0x85, 0x85, 0x85, 0x85, 0x85, 0x85, 0x85, 0x85, 0x85, 0x85, 0x85, 0x85, 0x85, 0x85, 
    0x85, 0x85, 0x85, 0x85, 0x85, 0x85, 0x85, 0x85, 0x85, 0x85, 0x85, 0x85, 0x85, 0x85, 0x85, 0x85, 
    0x85, 0x85, 0x85, 0x85, 0x85, 0x85, 0x85, 0x85, 0x85, 0x85, 0x85, 0x85, 0x85, 0x85, 0x85, 0x85, 
    0x85, 0x85, 0x85, 0x85, 0x85, 0x85, 0x85, 0x85, 0x85, 0x85, 0x85, 0x85, 0x85, 0x85, 0x85, 0x85, 
    0x85, 0x85, 0x85, 0x85, 0x85, 0x85, 0x85, 0x85, 0x85, 0x85, 0x85, 0x85, 0x85, 0x85, 0x85, 0x85, 
    0x85, 0x85, 0x85, 0x85, 0x85, 0x85, 0x85, 0x85, 0x85, 0x85, 0x85, 0x85, 0x85, 0x85, 0x85, 0x85, 
    0x85, 0x85, 0x85, 0x85, 0x85, 0x85, 0x85, 0x85, 0x85, 0x85, 0x85, 0x85, 0x85, 0x85, 0x85, 0x85, 
    0x85, 0x85, 0x85, 0x85, 0x85, 0x86, 0x86, 0x86, 0x86, 0x86, 0x86, 0x86, 0x86, 0x86, 0x86, 0x86, 
    0x86, 0x86, 0x86, 0x86, 0x86, 0x86, 0x86, 0x86, 0x86, 0x86, 0x86, 0x86, 0x86, 0x86, 0x86, 0x86, 
    0x86, 0x86, 0x86, 0x86, 0x86, 0x86, 0x86, 0x86, 0x86, 0x86, 0x86, 0x86, 0x86, 0x86, 0x86, 0x86, 
    0x86, 0x86, 0x86, 0x86, 0x86, 0x86, 0x86, 0x86, 0x86, 0x86, 0x86, 0x86, 0x86, 0x86, 0x86, 0x86, 
    0x86, 0x86, 0x86, 0x86, 0x86, 0x86, 0x86, 0x86, 0x86, 0x86, 0x86, 0x86, 0x86, 0x86, 0x86, 0x86, 
    0x86, 0x86, 0x86, 0x86, 0x86, 0x86, 0x86, 0x86, 0x86, 0x86, 0x86, 0x86, 0x86, 0x86, 0x86, 0x86, 
    0x86, 0x86, 0x86, 0x86, 0x86, 0x86, 0x86, 0x86, 0x86, 0x86, 0x86, 0x86, 0x86, 0x86, 0x86, 0x86, 
    0x86, 0x86, 0x86, 0x86, 0x86, 0x86, 0x86, 0x86, 0x86, 0x86, 0x86, 0x87, 0x87, 0x87, 0x87, 0x87, 
    0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 
    0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 
    0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 
    0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 
    0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 
    0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 
    0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x88, 0x88, 0x88, 
    0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 
    0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 
    0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 
    0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 
    0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 
    0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 
    0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 
    0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 
    0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 
    0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 
    0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 
    0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 
    0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 
    0x89, 0x89, 0x89, 0x89, 0x8A, 0x8A, 0x8A, 0x8A, 0x8A, 0x8A, 0x8A, 0x8A, 0x8A, 0x8A, 0x8A, 0x8A, 
    0x8A, 0x8A, 0x8A, 0x8A, 0x8A, 0x8A, 0x8A, 0x8A, 0x8A, 0x8A, 0x8A, 0x8A, 0x8A, 0x8A, 0x8A, 0x8A, 
    0x8A, 0x8A, 0x8A, 0x8A, 0x8A, 0x8A, 0x8A, 0x8A, 0x8A, 0x8A, 0x8A, 0x8A, 0x8A, 0x8A, 0x8A, 0x8A, 
    0x8A, 0x8A, 0x8A, 0x8A, 0x8A, 0x8A, 0x8A, 0x8A, 0x8A, 0x8A, 0x8A, 0x8A, 0x8A, 0x8A, 0x8A, 0x8A, 
    0x8A, 0x8A, 0x8A, 0x8A, 0x8A, 0x8A, 0x8A, 0x8A, 0x8A, 0x8A, 0x8A, 0x8A, 0x8A, 0x8A, 0x8A, 0x8A, 
    0x8A, 0x8A, 0x8A, 0x8A, 0x8A, 0x8A, 0x8A, 0x8A, 0x8A, 0x8A, 0x8A, 0x8A, 0x8A, 0x8A, 0x8A, 0x8A, 
    0x8A, 0x8A, 0x8A, 0x8A, 0x8A, 0x8A, 0x8A, 0x8A, 0x8A, 0x8A, 0x8A, 0x8B, 0x8B, 0x8B, 0x8B, 0x8B, 
    0x8B, 0x8B, 0x8B, 0x8B, 0x8B, 0x8B, 0x8B, 0x8B, 0x8B, 0x8B, 0x8B, 0x8B, 0x8B, 0x8B, 0x8B, 0x8B, 
    0x8B, 0x8B, 0x8B, 0x8B, 0x8B, 0x8B, 0x8B, 0x8B, 0x8B, 0x8B, 0x8B, 0x8B, 0x8B, 0x8B, 0x8B, 0x8B, 
    0x8B, 0x8B, 0x8B, 0x8B, 0x8B, 0x8B, 0x8B, 0x8B, 0x8B, 0x8B, 0x8B, 0x8B, 0x8B, 0x8B, 0x8B, 0x8B, 
    0x8B, 0x8B, 0x8B, 0x8B, 0x8B, 0x8B, 0x8B, 0x8B, 0x8B, 0x8B, 0x8B, 0x8B, 0x8B, 0x8B, 0x8B, 0x8B, 
    0x8B, 0x8B, 0x8B, 0x8B, 0x8B, 0x8B, 0x8B, 0x8B, 0x8B, 0x8B, 0x8B, 0x8B, 0x8B, 0x8B, 0x8B, 0x8B, 
    0x8B, 0x8B, 0x8B, 0x8B, 0x8B, 0x8B, 0x8B, 0x8B, 0x8B, 0x8B, 0x8B, 0x8B, 0x8B, 0x8C, 0x8C, 0x8C, 
    0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 
    0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 
    0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 
    0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 
    0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 
    0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x8D, 0x8D, 0x8D, 
    0x8D, 0x8D, 0x8D, 0x8D, 0x8D, 0x8D, 0x8D, 0x8D, 0x8D, 0x8D, 0x8D, 0x8D, 0x8D, 0x8D, 0x8D, 0x8D, 
    0x8D, 0x8D, 0x8D, 0x8D, 0x8D, 0x8D, 0x8D, 0x8D, 0x8D, 0x8D, 0x8D, 0x8D, 0x8D, 0x8D, 0x8D, 0x8D, 
    0x8D, 0x8D, 0x8D, 0x8D, 0x8D, 0x8D, 0x8D, 0x8D, 0x8D, 0x8D, 0x8D, 0x8D, 0x8D, 0x8D, 0x8D, 0x8D, 
    0x8D, 0x8D, 0x8D, 0x8D, 0x8D, 0x8D, 0x8D, 0x8D, 0x8D, 0x8D, 0x8D, 0x8D, 0x8D, 0x8D, 0x8D, 0x8D, 
    0x8D, 0x8D, 0x8D, 0x8D, 0x8D, 0x8D, 0x8D, 0x8D, 0x8D, 0x8D, 0x8D, 0x8D, 0x8D, 0x8D, 0x8D, 0x8D, 
    0x8D, 0x8D, 0x8D, 0x8D, 0x8D, 0x8D, 0x8D, 0x8D, 0x8D, 0x8E, 0x8E, 0x8E, 0x8E, 0x8E, 0x8E, 0x8E, 
    0x8E, 0x8E, 0x8E, 0x8E, 0x8E, 0x8E, 0x8E, 0x8E, 0x8E, 0x8E, 0x8E, 0x8E, 0x8E, 0x8E, 0x8E, 0x8E, 
    0x8E, 0x8E, 0x8E, 0x8E, 0x8E, 0x8E, 0x8E, 0x8E, 0x8E, 0x8E, 0x8E, 0x8E, 0x8E, 0x8E, 0x8E, 0x8E, 
    0x8E, 0x8E, 0x8E, 0x8E, 0x8E, 0x8E, 0x8E, 0x8E, 0x8E, 0x8E, 0x8E, 0x8E, 0x8E, 0x8E, 0x8E, 0x8E, 
    0x8E, 0x8E, 0x8E, 0x8E, 0x8E, 0x8E, 0x8E, 0x8E, 0x8E, 0x8E, 0x8E, 0x8E, 0x8E, 0x8E, 0x8E, 0x8E, 
    0x8E, 0x8E, 0x8E, 0x8E, 0x8E, 0x8E, 0x8E, 0x8E, 0x8E, 0x8E, 0x8E, 0x8E, 0x8E, 0x8E, 0x8E, 0x8E, 
    0x8E, 0x8E, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 
    0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 
    0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 
    0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 
    0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 
    0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 
    0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 
    0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 
    0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 
    0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 
    0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x91, 0x91, 0x91, 0x91, 0x91, 0x91, 
    0x91, 0x91, 0x91, 0x91, 0x91, 0x91, 0x91, 0x91, 0x91, 0x91, 0x91, 0x91, 0x91, 0x91, 0x91, 0x91, 
    0x91, 0x91, 0x91, 0x91, 0x91, 0x91, 0x91, 0x91, 0x91, 0x91, 0x91, 0x91, 0x91, 0x91, 0x91, 0x91, 
    0x91, 0x91, 0x91, 0x91, 0x91, 0x91, 0x91, 0x91, 0x91, 0x91, 0x91, 0x91, 0x91, 0x91, 0x91, 0x91, 
    0x91, 0x91, 0x91, 0x91, 0x91, 0x91, 0x91, 0x91, 0x91, 0x91, 0x91, 0x91, 0x91, 0x91, 0x91, 0x91, 
    0x91, 0x91, 0x91, 0x91, 0x91, 0x91, 0x91, 0x91, 0x91, 0x91, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 
    0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 
    0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 
    0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 
    0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 
    0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x93, 0x93, 0x93, 0x93, 0x93, 0x93, 0x93, 0x93, 
    0x93, 0x93, 0x93, 0x93, 0x93, 0x93, 0x93, 0x93, 0x93, 0x93, 0x93, 0x93, 0x93, 0x93, 0x93, 0x93, 
    0x93, 0x93, 0x93, 0x93, 0x93, 0x93, 0x93, 0x93, 0x93, 0x93, 0x93, 0x93, 0x93, 0x93, 0x93, 0x93, 
    0x93, 0x93, 0x93, 0x93, 0x93, 0x93, 0x93, 0x93, 0x93, 0x93, 0x93, 0x93, 0x93, 0x93, 0x93, 0x93, 
    0x93, 0x93, 0x93, 0x93, 0x93, 0x93, 0x93, 0x93, 0x93, 0x93, 0x93, 0x93, 0x93, 0x93, 0x93, 0x93, 
    0x93, 0x93, 0x94, 0x94, 0x94, 0x94, 0x94, 0x94, 0x94, 0x94, 0x94, 0x94, 0x94, 0x94, 0x94, 0x94, 
    0x94, 0x94, 0x94, 0x94, 0x94, 0x94, 0x94, 0x94, 0x94, 0x94, 0x94, 0x94, 0x94, 0x94, 0x94, 0x94, 
    0x94, 0x94, 0x94, 0x94, 0x94, 0x94, 0x94, 0x94, 0x94, 0x94, 0x94, 0x94, 0x94, 0x94, 0x94, 0x94, 
    0x94, 0x94, 0x94, 0x94, 0x94, 0x94, 0x94, 0x94, 0x94, 0x94, 0x94, 0x94, 0x94, 0x94, 0x94, 0x94, 
    0x94, 0x94, 0x94, 0x94, 0x94, 0x94, 0x94, 0x94, 0x94, 0x94, 0x95, 0x95, 0x95, 0x95, 0x95, 0x95, 
    0x95, 0x95, 0x95, 0x95, 0x95, 0x95, 0x95, 0x95, 0x95, 0x95, 0x95, 0x95, 0x95, 0x95, 0x95, 0x95, 
    0x95, 0x95, 0x95, 0x95, 0x95, 0x95, 0x95, 0x95, 0x95, 0x95, 0x95, 0x95, 0x95, 0x95, 0x95, 0x95, 
    0x95, 0x95, 0x95, 0x95, 0x95, 0x95, 0x95, 0x95, 0x95, 0x95, 0x95, 0x95, 0x95, 0x95, 0x95, 0x95, 
    0x95, 0x95, 0x95, 0x95, 0x95, 0x95, 0x95, 0x95, 0x95, 0x95, 0x95, 0x95, 0x95, 0x95, 0x95, 0x95, 
    0x96, 0x96, 0x96, 0x96, 0x96, 0x96, 0x96, 0x96, 0x96, 0x96, 0x96, 0x96, 0x96, 0x96, 0x96, 0x96, 
    0x96, 0x96, 0x96, 0x96, 0x96, 0x96, 0x96, 0x96, 0x96, 0x96, 0x96, 0x96, 0x96, 0x96, 0x96, 0x96, 
    0x96, 0x96, 0x96, 0x96, 0x96, 0x96, 0x96, 0x96, 0x96, 0x96, 0x96, 0x96, 0x96, 0x96, 0x96, 0x96, 
    0x96, 0x96, 0x96, 0x96, 0x96, 0x96, 0x96, 0x96, 0x96, 0x96, 0x96, 0x96, 0x96, 0x96, 0x96, 0x96, 
    0x96, 0x96, 0x96, 0x97, 0x97, 0x97, 0x97, 0x97, 0x97, 0x97, 0x97, 0x97, 0x97, 0x97, 0x97, 0x97, 
    0x97, 0x97, 0x97, 0x97, 0x97, 0x97, 0x97, 0x97, 0x97, 0x97, 0x97, 0x97, 0x97, 0x97, 0x97, 0x97, 
    0x97, 0x97, 0x97, 0x97, 0x97, 0x97, 0x97, 0x97, 0x97, 0x97, 0x97, 0x97, 0x97, 0x97, 0x97, 0x97, 
    0x97, 0x97, 0x97, 0x97, 0x97, 0x97, 0x97, 0x97, 0x97, 0x97, 0x97, 0x97, 0x97, 0x97, 0x97, 0x97, 
    0x97, 0x97, 0x97, 0x97, 0x98, 0x98, 0x98, 0x98, 0x98, 0x98, 0x98, 0x98, 0x98, 0x98, 0x98, 0x98, 
    0x98, 0x98, 0x98, 0x98, 0x98, 0x98, 0x98, 0x98, 0x98, 0x98, 0x98, 0x98, 0x98, 0x98, 0x98, 0x98, 
    0x98, 0x98, 0x98, 0x98, 0x98, 0x98, 0x98, 0x98, 0x98, 0x98, 0x98, 0x98, 0x98, 0x98, 0x98, 0x98, 
    0x98, 0x98, 0x98, 0x98, 0x98, 0x98, 0x98, 0x98, 0x98, 0x98, 0x98, 0x98, 0x98, 0x98, 0x98, 0x98, 
    0x98, 0x98, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 
    0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 
    0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 
    0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x9A, 
    0x9A, 0x9A, 0x9A, 0x9A, 0x9A, 0x9A, 0x9A, 0x9A, 0x9A, 0x9A, 0x9A, 0x9A, 0x9A, 0x9A, 0x9A, 0x9A, 
    0x9A, 0x9A, 0x9A, 0x9A, 0x9A, 0x9A, 0x9A, 0x9A, 0x9A, 0x9A, 0x9A, 0x9A, 0x9A, 0x9A, 0x9A, 0x9A, 
    0x9A, 0x9A, 0x9A, 0x9A, 0x9A, 0x9A, 0x9A, 0x9A, 0x9A, 0x9A, 0x9A, 0x9A, 0x9A, 0x9A, 0x9A, 0x9A, 
    0x9A, 0x9A, 0x9A, 0x9A, 0x9A, 0x9A, 0x9A, 0x9A, 0x9A, 0x9B, 0x9B, 0x9B, 0x9B, 0x9B, 0x9B, 0x9B, 
    0x9B, 0x9B, 0x9B, 0x9B, 0x9B, 0x9B, 0x9B, 0x9B, 0x9B, 0x9B, 0x9B, 0x9B, 0x9B, 0x9B, 0x9B, 0x9B, 
    0x9B, 0x9B, 0x9B, 0x9B, 0x9B, 0x9B, 0x9B, 0x9B, 0x9B, 0x9B, 0x9B, 0x9B, 0x9B, 0x9B, 0x9B, 0x9B, 
    0x9B, 0x9B, 0x9B, 0x9B, 0x9B, 0x9B, 0x9B, 0x9B, 0x9B, 0x9B, 0x9B, 0x9B, 0x9B, 0x9B, 0x9B, 0x9B, 
    0x9B, 0x9B, 0x9C, 0x9C, 0x9C, 0x9C, 0x9C, 0x9C, 0x9C, 0x9C, 0x9C, 0x9C, 0x9C, 0x9C, 0x9C, 0x9C, 
    0x9C, 0x9C, 0x9C, 0x9C, 0x9C, 0x9C, 0x9C, 0x9C, 0x9C, 0x9C, 0x9C, 0x9C, 0x9C, 0x9C, 0x9C, 0x9C, 
    0x9C, 0x9C, 0x9C, 0x9C, 0x9C, 0x9C, 0x9C, 0x9C, 0x9C, 0x9C, 0x9C, 0x9C, 0x9C, 0x9C, 0x9C, 0x9C, 
    0x9C, 0x9C, 0x9C, 0x9C, 0x9C, 0x9C, 0x9C, 0x9C, 0x9D, 0x9D, 0x9D, 0x9D, 0x9D, 0x9D, 0x9D, 0x9D, 
    0x9D, 0x9D, 0x9D, 0x9D, 0x9D, 0x9D, 0x9D, 0x9D, 0x9D, 0x9D, 0x9D, 0x9D, 0x9D, 0x9D, 0x9D, 0x9D, 
    0x9D, 0x9D, 0x9D, 0x9D, 0x9D, 0x9D, 0x9D, 0x9D, 0x9D, 0x9D, 0x9D, 0x9D, 0x9D, 0x9D, 0x9D, 0x9D, 
    0x9D, 0x9D, 0x9D, 0x9D, 0x9D, 0x9D, 0x9D, 0x9D, 0x9D, 0x9D, 0x9D, 0x9D, 0x9D, 0x9E, 0x9E, 0x9E, 
    0x9E, 0x9E, 0x9E, 0x9E, 0x9E, 0x9E, 0x9E, 0x9E, 0x9E, 0x9E, 0x9E, 0x9E, 0x9E, 0x9E, 0x9E, 0x9E, 
    0x9E, 0x9E, 0x9E, 0x9E, 0x9E, 0x9E, 0x9E, 0x9E, 0x9E, 0x9E, 0x9E, 0x9E, 0x9E, 0x9E, 0x9E, 0x9E, 
    0x9E, 0x9E, 0x9E, 0x9E, 0x9E, 0x9E, 0x9E, 0x9E, 0x9E, 0x9E, 0x9E, 0x9E, 0x9E, 0x9E, 0x9E, 0x9F, 
    0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 
    0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 
    0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 
    0xA0, 0xA0, 0xA0, 0xA0, 0xA0, 0xA0, 0xA0, 0xA0, 0xA0, 0xA0, 0xA0, 0xA0, 0xA0, 0xA0, 0xA0, 0xA0, 
    0xA0, 0xA0, 0xA0, 0xA0, 0xA0, 0xA0, 0xA0, 0xA0, 0xA0, 0xA0, 0xA0, 0xA0, 0xA0, 0xA0, 0xA0, 0xA0, 
    0xA0, 0xA0, 0xA0, 0xA0, 0xA0, 0xA0, 0xA0, 0xA0, 0xA0, 0xA0, 0xA0, 0xA0, 0xA0, 0xA0, 0xA0, 0xA0, 
    0xA1, 0xA1, 0xA1, 0xA1, 0xA1, 0xA1, 0xA1, 0xA1, 0xA1, 0xA1, 0xA1, 0xA1, 0xA1, 0xA1, 0xA1, 0xA1, 
    0xA1, 0xA1, 0xA1, 0xA1, 0xA1, 0xA1, 0xA1, 0xA1, 0xA1, 0xA1, 0xA1, 0xA1, 0xA1, 0xA1, 0xA1, 0xA1, 
    0xA1, 0xA1, 0xA1, 0xA1, 0xA1, 0xA1, 0xA1, 0xA1, 0xA1, 0xA1, 0xA1, 0xA1, 0xA1, 0xA2, 0xA2, 0xA2, 
    0xA2, 0xA2, 0xA2, 0xA2, 0xA2, 0xA2, 0xA2, 0xA2, 0xA2, 0xA2, 0xA2, 0xA2, 0xA2, 0xA2, 0xA2, 0xA2, 
    0xA2, 0xA2, 0xA2, 0xA2, 0xA2, 0xA2, 0xA2, 0xA2, 0xA2, 0xA2, 0xA2, 0xA2, 0xA2, 0xA2, 0xA2, 0xA2, 
    0xA2, 0xA2, 0xA2, 0xA2, 0xA2, 0xA2, 0xA2, 0xA2, 0xA2, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 
    0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 
    0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 
    0xA3, 0xA3, 0xA3, 0xA3, 0xA4, 0xA4, 0xA4, 0xA4, 0xA4, 0xA4, 0xA4, 0xA4, 0xA4, 0xA4, 0xA4, 0xA4, 
    0xA4, 0xA4, 0xA4, 0xA4, 0xA4, 0xA4, 0xA4, 0xA4, 0xA4, 0xA4, 0xA4, 0xA4, 0xA4, 0xA4, 0xA4, 0xA4, 
    0xA4, 0xA4, 0xA4, 0xA4, 0xA4, 0xA4, 0xA4, 0xA4, 0xA4, 0xA4, 0xA4, 0xA4, 0xA4, 0xA5, 0xA5, 0xA5, 
    0xA5, 0xA5, 0xA5, 0xA5, 0xA5, 0xA5, 0xA5, 0xA5, 0xA5, 0xA5, 0xA5, 0xA5, 0xA5, 0xA5, 0xA5, 0xA5, 
    0xA5, 0xA5, 0xA5, 0xA5, 0xA5, 0xA5, 0xA5, 0xA5, 0xA5, 0xA5, 0xA5, 0xA5, 0xA5, 0xA5, 0xA5, 0xA5, 
    0xA5, 0xA5, 0xA5, 0xA5, 0xA5, 0xA6, 0xA6, 0xA6, 0xA6, 0xA6, 0xA6, 0xA6, 0xA6, 0xA6, 0xA6, 0xA6, 
    0xA6, 0xA6, 0xA6, 0xA6, 0xA6, 0xA6, 0xA6, 0xA6, 0xA6, 0xA6, 0xA6, 0xA6, 0xA6, 0xA6, 0xA6, 0xA6, 
    0xA6, 0xA6, 0xA6, 0xA6, 0xA6, 0xA6, 0xA6, 0xA6, 0xA6, 0xA6, 0xA6, 0xA7, 0xA7, 0xA7, 0xA7, 0xA7, 
    0xA7, 0xA7, 0xA7, 0xA7, 0xA7, 0xA7, 0xA7, 0xA7, 0xA7, 0xA7, 0xA7, 0xA7, 0xA7, 0xA7, 0xA7, 0xA7, 
    0xA7, 0xA7, 0xA7, 0xA7, 0xA7, 0xA7, 0xA7, 0xA7, 0xA7, 0xA7, 0xA7, 0xA7, 0xA7, 0xA7, 0xA7, 0xA7, 
    0xA8, 0xA8, 0xA8, 0xA8, 0xA8, 0xA8, 0xA8, 0xA8, 0xA8, 0xA8, 0xA8, 0xA8, 0xA8, 0xA8, 0xA8, 0xA8, 
    0xA8, 0xA8, 0xA8, 0xA8, 0xA8, 0xA8, 0xA8, 0xA8, 0xA8, 0xA8, 0xA8, 0xA8, 0xA8, 0xA8, 0xA8, 0xA8, 
    0xA8, 0xA8, 0xA8, 0xA8, 0xA9, 0xA9, 0xA9, 0xA9, 0xA9, 0xA9, 0xA9, 0xA9, 0xA9, 0xA9, 0xA9, 0xA9, 
    0xA9, 0xA9, 0xA9, 0xA9, 0xA9, 0xA9, 0xA9, 0xA9, 0xA9, 0xA9, 0xA9, 0xA9, 0xA9, 0xA9, 0xA9, 0xA9, 
    0xA9, 0xA9, 0xA9, 0xA9, 0xA9, 0xA9, 0xA9, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 
    0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 
    0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAB, 0xAB, 0xAB, 0xAB, 0xAB, 0xAB, 0xAB, 0xAB, 
    0xAB, 0xAB, 0xAB, 0xAB, 0xAB, 0xAB, 0xAB, 0xAB, 0xAB, 0xAB, 0xAB, 0xAB, 0xAB, 0xAB, 0xAB, 0xAB, 
    0xAB, 0xAB, 0xAB, 0xAB, 0xAB, 0xAB, 0xAB, 0xAB, 0xAC, 0xAC, 0xAC, 0xAC, 0xAC, 0xAC, 0xAC, 0xAC, 
    0xAC, 0xAC, 0xAC, 0xAC, 0xAC, 0xAC, 0xAC, 0xAC, 0xAC, 0xAC, 0xAC, 0xAC, 0xAC, 0xAC, 0xAC, 0xAC, 
    0xAC, 0xAC, 0xAC, 0xAC, 0xAC, 0xAC, 0xAC, 0xAD, 0xAD, 0xAD, 0xAD, 0xAD, 0xAD, 0xAD, 0xAD, 0xAD, 
    0xAD, 0xAD, 0xAD, 0xAD, 0xAD, 0xAD, 0xAD, 0xAD, 0xAD, 0xAD, 0xAD, 0xAD, 0xAD, 0xAD, 0xAD, 0xAD, 
    0xAD, 0xAD, 0xAD, 0xAD, 0xAD, 0xAE, 0xAE, 0xAE, 0xAE, 0xAE, 0xAE, 0xAE, 0xAE, 0xAE, 0xAE, 0xAE, 
    0xAE, 0xAE, 0xAE, 0xAE, 0xAE, 0xAE, 0xAE, 0xAE, 0xAE, 0xAE, 0xAE, 0xAE, 0xAE, 0xAE, 0xAE, 0xAE, 
    0xAE, 0xAE, 0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 
    0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 0xB0, 0xB0, 
    0xB0, 0xB0, 0xB0, 0xB0, 0xB0, 0xB0, 0xB0, 0xB0, 0xB0, 0xB0, 0xB0, 0xB0, 0xB0, 0xB0, 0xB0, 0xB0, 
    0xB0, 0xB0, 0xB0, 0xB0, 0xB0, 0xB0, 0xB0, 0xB0, 0xB0, 0xB1, 0xB1, 0xB1, 0xB1, 0xB1, 0xB1, 0xB1, 
    0xB1, 0xB1, 0xB1, 0xB1, 0xB1, 0xB1, 0xB1, 0xB1, 0xB1, 0xB1, 0xB1, 0xB1, 0xB1, 0xB1, 0xB1, 0xB1, 
    0xB1, 0xB1, 0xB1, 0xB2, 0xB2, 0xB2, 0xB2, 0xB2, 0xB2, 0xB2, 0xB2, 0xB2, 0xB2, 0xB2, 0xB2, 0xB2, 
    0xB2, 0xB2, 0xB2, 0xB2, 0xB2, 0xB2, 0xB2, 0xB2, 0xB2, 0xB2, 0xB2, 0xB2, 0xB3, 0xB3, 0xB3, 0xB3, 
    0xB3, 0xB3, 0xB3, 0xB3, 0xB3, 0xB3, 0xB3, 0xB3, 0xB3, 0xB3, 0xB3, 0xB3, 0xB3, 0xB3, 0xB3, 0xB3, 
    0xB3, 0xB3, 0xB3, 0xB3, 0xB3, 0xB4, 0xB4, 0xB4, 0xB4, 0xB4, 0xB4, 0xB4, 0xB4, 0xB4, 0xB4, 0xB4, 
    0xB4, 0xB4, 0xB4, 0xB4, 0xB4, 0xB4, 0xB4, 0xB4, 0xB4, 0xB4, 0xB4, 0xB4, 0xB5, 0xB5, 0xB5, 0xB5, 
    0xB5, 0xB5, 0xB5, 0xB5, 0xB5, 0xB5, 0xB5, 0xB5, 0xB5, 0xB5, 0xB5, 0xB5, 0xB5, 0xB5, 0xB5, 0xB5, 
    0xB5, 0xB5, 0xB5, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 
    0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB7, 0xB7, 0xB7, 0xB7, 0xB7, 0xB7, 0xB7, 
    0xB7, 0xB7, 0xB7, 0xB7, 0xB7, 0xB7, 0xB7, 0xB7, 0xB7, 0xB7, 0xB7, 0xB7, 0xB7, 0xB7, 0xB8, 0xB8, 
    0xB8, 0xB8, 0xB8, 0xB8, 0xB8, 0xB8, 0xB8, 0xB8, 0xB8, 0xB8, 0xB8, 0xB8, 0xB8, 0xB8, 0xB8, 0xB8, 
    0xB8, 0xB8, 0xB9, 0xB9, 0xB9, 0xB9, 0xB9, 0xB9, 0xB9, 0xB9, 0xB9, 0xB9, 0xB9, 0xB9, 0xB9, 0xB9, 
    0xB9, 0xB9, 0xB9, 0xB9, 0xB9, 0xB9, 0xBA, 0xBA, 0xBA, 0xBA, 0xBA, 0xBA, 0xBA, 0xBA, 0xBA, 0xBA, 
    0xBA, 0xBA, 0xBA, 0xBA, 0xBA, 0xBA, 0xBA, 0xBA, 0xBA, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 
    0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBC, 0xBC, 0xBC, 0xBC, 0xBC, 
    0xBC, 0xBC, 0xBC, 0xBC, 0xBC, 0xBC, 0xBC, 0xBC, 0xBC, 0xBC, 0xBC, 0xBC, 0xBC, 0xBD, 0xBD, 0xBD, 
    0xBD, 0xBD, 0xBD, 0xBD, 0xBD, 0xBD, 0xBD, 0xBD, 0xBD, 0xBD, 0xBD, 0xBD, 0xBD, 0xBD, 0xBE, 0xBE, 
    0xBE, 0xBE, 0xBE, 0xBE, 0xBE, 0xBE, 0xBE, 0xBE, 0xBE, 0xBE, 0xBE, 0xBE, 0xBE, 0xBE, 0xBE, 0xBF, 
    0xBF, 0xBF, 0xBF, 0xBF, 0xBF, 0xBF, 0xBF, 0xBF, 0xBF, 0xBF, 0xBF, 0xBF, 0xBF, 0xBF, 0xBF, 0xC0, 
    0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC1, 0xC1, 
    0xC1, 0xC1, 0xC1, 0xC1, 0xC1, 0xC1, 0xC1, 0xC1, 0xC1, 0xC1, 0xC1, 0xC1, 0xC1, 0xC2, 0xC2, 0xC2, 
    0xC2, 0xC2, 0xC2, 0xC2, 0xC2, 0xC2, 0xC2, 0xC2, 0xC2, 0xC2, 0xC2, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 
    0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0xC4, 0xC4, 0xC4, 0xC4, 0xC4, 0xC4, 0xC4, 
    0xC4, 0xC4, 0xC4, 0xC4, 0xC4, 0xC4, 0xC4, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 
    0xC5, 0xC5, 0xC5, 0xC5, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 
    0xC7, 0xC7, 0xC7, 0xC7, 0xC7, 0xC7, 0xC7, 0xC7, 0xC7, 0xC7, 0xC7, 0xC7, 0xC8, 0xC8, 0xC8, 0xC8, 
    0xC8, 0xC8, 0xC8, 0xC8, 0xC8, 0xC8, 0xC8, 0xC8, 0xC9, 0xC9, 0xC9, 0xC9, 0xC9, 0xC9, 0xC9, 0xC9, 
    0xC9, 0xC9, 0xC9, 0xCA, 0xCA, 0xCA, 0xCA, 0xCA, 0xCA, 0xCA, 0xCA, 0xCA, 0xCA, 0xCA, 0xCB, 0xCB, 
    0xCB, 0xCB, 0xCB, 0xCB, 0xCB, 0xCB, 0xCB, 0xCB, 0xCB, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 
    0xCC, 0xCC, 0xCC, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCE, 0xCE, 0xCE, 0xCE, 
    0xCE, 0xCE, 0xCE, 0xCE, 0xCE, 0xCE, 0xCF, 0xCF, 0xCF, 0xCF, 0xCF, 0xCF, 0xCF, 0xCF, 0xCF, 0xD0, 
    0xD0, 0xD0, 0xD0, 0xD0, 0xD0, 0xD0, 0xD0, 0xD0, 0xD1, 0xD1, 0xD1, 0xD1, 0xD1, 0xD1, 0xD1, 0xD1, 
    0xD2, 0xD2, 0xD2, 0xD2, 0xD2, 0xD2, 0xD2, 0xD2, 0xD3, 0xD3, 0xD3, 0xD3, 0xD3, 0xD3, 0xD3, 0xD3, 
    0xD4, 0xD4, 0xD4, 0xD4, 0xD4, 0xD4, 0xD4, 0xD4, 0xD5, 0xD5, 0xD5, 0xD5, 0xD5, 0xD5, 0xD5, 0xD6, 
    0xD6, 0xD6, 0xD6, 0xD6, 0xD6, 0xD6, 0xD6, 0xD7, 0xD7, 0xD7, 0xD7, 0xD7, 0xD7, 0xD7, 0xD8, 0xD8, 
    0xD8, 0xD8, 0xD8, 0xD8, 0xD9, 0xD9, 0xD9, 0xD9, 0xD9, 0xD9, 0xD9, 0xDA, 0xDA, 0xDA, 0xDA, 0xDA, 
    0xDA, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDC, 0xDC, 0xDC, 0xDC, 0xDC, 0xDC, 0xDD, 0xDD, 0xDD, 
    0xDD, 0xDD, 0xDE, 0xDE, 0xDE, 0xDE, 0xDE, 0xDE, 0xDF, 0xDF, 0xDF, 0xDF, 0xDF, 0xE0, 0xE0, 0xE0, 
    0xE0, 0xE0, 0xE1, 0xE1, 0xE1, 0xE1, 0xE1, 0xE2, 0xE2, 0xE2, 0xE2, 0xE3, 0xE3, 0xE3, 0xE3, 0xE3, 
    0xE4, 0xE4, 0xE4, 0xE4, 0xE5, 0xE5, 0xE5, 0xE5, 0xE6, 0xE6, 0xE6, 0xE6, 0xE7, 0xE7, 0xE7, 0xE7, 
    0xE8, 0xE8, 0xE8, 0xE8, 0xE9, 0xE9, 0xE9, 0xE9, 0xEA, 0xEA, 0xEA, 0xEB, 0xEB, 0xEB, 0xEB, 0xEC, 
    0xEC, 0xEC, 0xED, 0xED, 0xED, 0xEE, 0xEE, 0xEE, 0xEF, 0xEF, 0xEF, 0xF0, 0xF0, 0xF0, 0xF1, 0xF1, 
    0xF1, 0xF2, 0xF2, 0xF2, 0xF3, 0xF3, 0xF4, 0xF4, 0xF4, 0xF5, 0xF5, 0xF6, 0xF6, 0xF6, 0xF7, 0xF7, 
    0xF8, 0xF8, 0xF9, 0xF9, 0xFA, 0xFA, 0xFB, 0xFB, 0xFC, 0xFC, 0xFD, 0xFD, 0xFE, 0xFF, 0xFF, 0x00, 
};

static unsigned long lookupTable[0x100] =
{
	0x00000000,
	0x0000000B,
	0x00000016,
	0x00000021,
	0x0000002D,
	0x0000003A,
	0x00000046,
	0x00000053,
	0x00000061,
	0x00000070,
	0x0000007E,
	0x0000008D,
	0x0000009E,
	0x000000AE,
	0x000000BF,
	0x000000D0,
	0x000000E3,
	0x000000F5,
	0x00000109,
	0x0000011D,
	0x00000132,
	0x00000148,
	0x0000015E,
	0x00000176,
	0x0000018E,
	0x000001A6,
	0x000001C1,
	0x000001DB,
	0x000001F7,
	0x00000214,
	0x00000231,
	0x00000250,
	0x00000270,
	0x00000291,
	0x000002B3,
	0x000002D6,
	0x000002FB,
	0x00000321,
	0x00000349,
	0x00000371,
	0x0000039B,
	0x000003C6,
	0x000003F4,
	0x00000423,
	0x00000454,
	0x00000486,
	0x000004BA,
	0x000004EF,
	0x00000528,
	0x00000561,
	0x0000059D,
	0x000005DB,
	0x0000061B,
	0x0000065D,
	0x000006A3,
	0x000006EA,
	0x00000734,
	0x00000780,
	0x000007D0,
	0x00000822,
	0x00000876,
	0x000008CE,
	0x00000929,
	0x00000988,
	0x000009E9,
	0x00000A4F,
	0x00000AB8,
	0x00000B25,
	0x00000B95,
	0x00000C09,
	0x00000C82,
	0x00000CFF,
	0x00000D80,
	0x00000E06,
	0x00000E91,
	0x00000F21,
	0x00000FB5,
	0x0000104F,
	0x000010EF,
	0x00001194,
	0x00001240,
	0x000012F2,
	0x000013A9,
	0x00001467,
	0x0000152C,
	0x000015F8,
	0x000016CB,
	0x000017A6,
	0x00001889,
	0x00001974,
	0x00001A66,
	0x00001B62,
	0x00001C66,
	0x00001D75,
	0x00001E8C,
	0x00001FAE,
	0x000020DA,
	0x00002210,
	0x00002352,
	0x0000249F,
	0x000025F8,
	0x0000275E,
	0x000028D0,
	0x00002A4F,
	0x00002BDC,
	0x00002D77,
	0x00002F21,
	0x000030DA,
	0x000032A2,
	0x0000347B,
	0x00003665,
	0x00003860,
	0x00003A6E,
	0x00003C8D,
	0x00003EC1,
	0x00004109,
	0x00004365,
	0x000045D7,
	0x0000485F,
	0x00004AFE,
	0x00004DB5,
	0x00005085,
	0x0000536F,
	0x00005673,
	0x00005993,
	0x00005CCF,
	0x00006029,
	0x000063A2,
	0xFFFF98C7,
	0xFFFF9C5E,
	0xFFFF9FD7,
	0xFFFFA331,
	0xFFFFA66D,
	0xFFFFA98D,
	0xFFFFAC91,
	0xFFFFAF7B,
	0xFFFFB24B,
	0xFFFFB502,
	0xFFFFB7A1,
	0xFFFFBA29,
	0xFFFFBC9B,
	0xFFFFBEF7,
	0xFFFFC13F,
	0xFFFFC373,
	0xFFFFC592,
	0xFFFFC7A0,
	0xFFFFC99B,
	0xFFFFCB85,
	0xFFFFCD5E,
	0xFFFFCF26,
	0xFFFFD0DF,
	0xFFFFD289,
	0xFFFFD424,
	0xFFFFD5B1,
	0xFFFFD730,
	0xFFFFD8A2,
	0xFFFFDA08,
	0xFFFFDB61,
	0xFFFFDCAE,
	0xFFFFDDF0,
	0xFFFFDF26,
	0xFFFFE052,
	0xFFFFE174,
	0xFFFFE28B,
	0xFFFFE39A,
	0xFFFFE49E,
	0xFFFFE59A,
	0xFFFFE68C,
	0xFFFFE777,
	0xFFFFE85A,
	0xFFFFE935,
	0xFFFFEA08,
	0xFFFFEAD4,
	0xFFFFEB99,
	0xFFFFEC57,
	0xFFFFED0E,
	0xFFFFEDC0,
	0xFFFFEE6C,
	0xFFFFEF11,
	0xFFFFEFB1,
	0xFFFFF04B,
	0xFFFFF0DF,
	0xFFFFF16F,
	0xFFFFF1FA,
	0xFFFFF280,
	0xFFFFF301,
	0xFFFFF37E,
	0xFFFFF3F7,
	0xFFFFF46B,
	0xFFFFF4DB,
	0xFFFFF548,
	0xFFFFF5B1,
	0xFFFFF617,
	0xFFFFF678,
	0xFFFFF6D7,
	0xFFFFF732,
	0xFFFFF78A,
	0xFFFFF7DE,
	0xFFFFF830,
	0xFFFFF880,
	0xFFFFF8CC,
	0xFFFFF916,
	0xFFFFF95D,
	0xFFFFF9A3,
	0xFFFFF9E5,
	0xFFFFFA25,
	0xFFFFFA63,
	0xFFFFFA9F,
	0xFFFFFAD8,
	0xFFFFFB11,
	0xFFFFFB46,
	0xFFFFFB7A,
	0xFFFFFBAC,
	0xFFFFFBDD,
	0xFFFFFC0C,
	0xFFFFFC3A,
	0xFFFFFC65,
	0xFFFFFC8F,
	0xFFFFFCB7,
	0xFFFFFCDF,
	0xFFFFFD05,
	0xFFFFFD2A,
	0xFFFFFD4D,
	0xFFFFFD6F,
	0xFFFFFD90,
	0xFFFFFDB0,
	0xFFFFFDCF,
	0xFFFFFDEC,
	0xFFFFFE09,
	0xFFFFFE25,
	0xFFFFFE3F,
	0xFFFFFE5A,
	0xFFFFFE72,
	0xFFFFFE8A,
	0xFFFFFEA2,
	0xFFFFFEB8,
	0xFFFFFECE,
	0xFFFFFEE3,
	0xFFFFFEF7,
	0xFFFFFF0B,
	0xFFFFFF1D,
	0xFFFFFF30,
	0xFFFFFF41,
	0xFFFFFF52,
	0xFFFFFF62,
	0xFFFFFF73,
	0xFFFFFF82,
	0xFFFFFF90,
	0xFFFFFF9F,
	0xFFFFFFAD,
	0xFFFFFFBA,
	0xFFFFFFC6,
	0xFFFFFFD3,
	0xFFFFFFDF,
	0xFFFFFFEA,
	0xFFFFFFF5,
};

unsigned long CExciteBikeSAMAudioDecompression::GetSizeFile(CString filename)
{
	FILE* inFile = fopen(filename, "rb");
	
	if (inFile == NULL)
		return 0;

	fseek(inFile, 0, SEEK_END);
	unsigned long fileSize = ftell(inFile);
	fclose(inFile);
	return fileSize;
}

/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */


unsigned long FUN_000aefc4(unsigned char* RAM, unsigned long param_1, unsigned long param_2, int param_3)

{
  unsigned char uVar1;
  unsigned long puVar2Offset;
  
  puVar2Offset = param_1;
  if (param_3 != 0) {
    do {
	  uVar1 = CSharedFunctions::CharArrayToChar(RAM, param_2);
      param_2 = param_2 + 1;
      param_3 = param_3 + -1;
	  CSharedFunctions::WriteCharToBuffer(RAM, puVar2Offset, uVar1);
      puVar2Offset = puVar2Offset + 1;
    } while (param_3 != 0);
  }
  return param_1;
}


/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */

void FUN_0000ee40(unsigned char* RAM)

{
  if (CSharedFunctions::CharArrayToLong(RAM, 0x800c3af0) == -1) {
      CSharedFunctions::WriteLongToBuffer(RAM, 0x800c3af0, 0);
  }
  return;
}

void FUN_000bdaa4(unsigned char* RAM, int param_1)
 {
	// 800733B0 to 8013DAC0
	//CSharedFunctions::WriteLongToBuffer(RAM, CSharedFunctions::CharArrayToLong(RAM, 0x801017d8), (param_1 + -0x10)); // added manually this was all that mattered here
	return;

  /*int iVar1;
  unsigned long ppiVar2Offset;
  unsigned long uVar3;
  unsigned long ppiVar4Offset;
  unsigned long ppiVar5Offset;
  unsigned long ppiVar6Offset;
  
  ppiVar6Offset = CSharedFunctions::CharArrayToLong(RAM, 0x801017d8);
  if (param_1 == 0) {
    return;
  }
  ppiVar4Offset = param_1 + -0x10;
  iVar1 = (int)CSharedFunctions::CharArrayToLong(RAM, param_1 + -8);
  unsigned long compareValue = (int)CSharedFunctions::CharArrayToLong(RAM, param_1 + -0x10) + (unsigned long)CSharedFunctions::CharArrayToLong(RAM, param_1 + -0xc) + iVar1 + (int)CSharedFunctions::CharArrayToLong(RAM, param_1 + -4);
  if (compareValue == -0x4a9dbc61) { // b562439f force to true to bypass check, but iVar1 has to be late enough not overwritten by data, and is fixed size
    ppiVar5Offset = ppiVar4Offset + iVar1 * 4 * 4;
	unsigned long compareValue2 = (int)CSharedFunctions::CharArrayToLong(RAM, ppiVar5Offset) + (int)CSharedFunctions::CharArrayToLong(RAM, ppiVar5Offset + 1 * 4) + CSharedFunctions::CharArrayToLong(RAM, ppiVar5Offset + 2 * 4) + CSharedFunctions::CharArrayToLong(RAM, ppiVar5Offset + 3 * 4);
	if (compareValue2 == -0x4a9dbc61) { // b562439f force to true to bypass check, but iVar1 has to be late enough not overwritten by data, and is fixed size
      if (((unsigned long)CSharedFunctions::CharArrayToLong(RAM, param_1 + -0xc) & 1) != 0) {
		CSharedFunctions::WriteLongToBuffer(RAM, param_1 + -0xc, 0);
		CSharedFunctions::WriteLongToBuffer(RAM, 0x801017c4, CSharedFunctions::CharArrayToLong(RAM, 0x801017c4) + iVar1);
		ppiVar5Offset = (int)CSharedFunctions::CharArrayToLong(RAM, ppiVar6Offset);
        CSharedFunctions::WriteLongToBuffer(RAM, 0x801017cc, CSharedFunctions::CharArrayToLong(RAM, 0x801017cc) - iVar1);
        ppiVar2Offset = ppiVar5Offset;
        if (ppiVar6Offset != ppiVar5Offset) {
          do {
            ppiVar5Offset = ppiVar2Offset;
            if ((ppiVar6Offset < ppiVar4Offset) && (ppiVar4Offset < ppiVar5Offset)) {
              CSharedFunctions::WriteLongToBuffer(RAM, ppiVar6Offset, ppiVar4Offset);
              goto LAB_000bdb90;
            }
            if (ppiVar5Offset <= ppiVar6Offset) {
              if (ppiVar6Offset < ppiVar4Offset) break;
              if (ppiVar4Offset < ppiVar5Offset)
			  {
				  goto code_r0x000bdb74;
			  }
            }
			ppiVar2Offset = (int)CSharedFunctions::CharArrayToLong(RAM, ppiVar5Offset);
            ppiVar6Offset = ppiVar5Offset;
          } while( true );
        }
        CSharedFunctions::WriteLongToBuffer(RAM, ppiVar6Offset, (int)ppiVar4Offset);
        goto LAB_000bdb90;
      }
      uVar3 = 0x800dc3cc;
    }
    else {
      uVar3 = 0x800dc398;
    }
  }
  else {
    uVar3 = 0x800dc358;
  }
  FUN_0000ee40(RAM); //, uVar3*
  //FUN_000bd370(); TODO
  return;
code_r0x000bdb74:
  CSharedFunctions::WriteLongToBuffer(RAM, ppiVar6Offset, ppiVar4Offset);
LAB_000bdb90:
  CSharedFunctions::WriteLongToBuffer(RAM, ppiVar5Offset + 1 * 4, ppiVar4Offset);
  
  CSharedFunctions::WriteLongToBuffer(RAM, (param_1 + -0xc), ppiVar6Offset);
  CSharedFunctions::WriteLongToBuffer(RAM, ppiVar4Offset, ppiVar5Offset);
  if (ppiVar6Offset + (int)CSharedFunctions::CharArrayToLong(RAM, ppiVar6Offset + (2 * 4)) * 4 * 4 == ppiVar4Offset) {
    CSharedFunctions::WriteLongToBuffer(RAM, ppiVar6Offset + (2 * 4), (((int)CSharedFunctions::CharArrayToLong(RAM, ppiVar6Offset + 2 * 4) + (int)CSharedFunctions::CharArrayToLong(RAM, (param_1 + -8)))));
	CSharedFunctions::WriteLongToBuffer(RAM, ppiVar6Offset, CSharedFunctions::CharArrayToLong(RAM, ppiVar4Offset));
    CSharedFunctions::WriteLongToBuffer(RAM, ppiVar4Offset + 1 * 4, (int)ppiVar6Offset);
    ppiVar4Offset = ppiVar6Offset;
  }
  if (ppiVar4Offset + (int)CSharedFunctions::CharArrayToLong(RAM, ppiVar4Offset + 2 * 4) * 4 * 4 == ppiVar5Offset) {
    CSharedFunctions::WriteLongToBuffer(RAM, ppiVar4Offset + 2 * 4, ((int)CSharedFunctions::CharArrayToLong(RAM, ppiVar4Offset + 2 * 4) + (int)CSharedFunctions::CharArrayToLong(RAM, ppiVar5Offset + 2 * 4)));
    CSharedFunctions::WriteLongToBuffer(RAM, ppiVar4Offset, CSharedFunctions::CharArrayToLong(RAM, ppiVar5Offset));
	ppiVar5Offset = (int)CSharedFunctions::CharArrayToLong(RAM, ppiVar5Offset);
    CSharedFunctions::WriteLongToBuffer(RAM, ppiVar5Offset + 1 * 4, ppiVar4Offset);
  }
  CSharedFunctions::WriteLongToBuffer(RAM, ppiVar6Offset + 3 * 4, (-0x4a9dbc61 - ((int)CSharedFunctions::CharArrayToLong(RAM, ppiVar6Offset) + (int)CSharedFunctions::CharArrayToLong(RAM, ppiVar6Offset + 1 * 4) + (int)CSharedFunctions::CharArrayToLong(RAM, ppiVar6Offset + 2 * 4))));
  CSharedFunctions::WriteLongToBuffer(RAM, ppiVar4Offset + 3 * 4, (-0x4a9dbc61 - ((int)CSharedFunctions::CharArrayToLong(RAM, ppiVar4Offset) + (int)CSharedFunctions::CharArrayToLong(RAM, ppiVar4Offset + 1 * 4) + (int)CSharedFunctions::CharArrayToLong(RAM, ppiVar4Offset + 2 * 4))));
  CSharedFunctions::WriteLongToBuffer(RAM, ppiVar5Offset + 3 * 4, (-0x4a9dbc61 - ((int)CSharedFunctions::CharArrayToLong(RAM, ppiVar5Offset) + (int)CSharedFunctions::CharArrayToLong(RAM, ppiVar5Offset + 1 * 4) + (int)CSharedFunctions::CharArrayToLong(RAM, ppiVar5Offset + 2 * 4))));
  return;*/
}

void FUN_0000eba0(unsigned char* RAM, unsigned long param_1, unsigned long param_2, int param_3)
{
  if (0 < param_3) {
    do {
      CSharedFunctions::WriteShortToBuffer(RAM, param_1, param_2);
      param_3 = param_3 + -1;
      param_1 = param_1 + 1 * 2;
    } while (0 < param_3);
  }
  return;
}


/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */


void FUN_000dd0a4(unsigned char* RAM, unsigned long param_1, unsigned long param_2, int param_3, unsigned long param_4)

{
	//param1 byte
	//param2 short
	//param_4 short

  unsigned char bVar1;
  short sVar2 = 0;
  short sVar3;
  unsigned short uVar4;
  bool bVar5;
  __int64 lVar6;
  __int64 lVar7;
  __int64 lVar8;
  int iVar9;
  unsigned long uVar10;
  unsigned long uVar11;
  int iVar12;
  
  uVar10 = (unsigned long)CSharedFunctions::CharArrayToChar(RAM, param_1 + 1) * 0x100 + CSharedFunctions::CharArrayToChar(RAM, param_1);
  param_1 = param_1 + 2;
  uVar11 = uVar10 & 0xfffffff8;
  lVar6 = (__int64)(short)CSharedFunctions::CharArrayToShort(RAM, param_4);
  lVar7 = (__int64)(short)CSharedFunctions::CharArrayToShort(RAM, param_4 + 1 * 2);
  iVar12 = (uVar10 & 7) * 4;
  //sVar2 = CSharedFunctions::CharArrayToShort(RAM, iVar12 + 0x800DCF68);
  //sVar3 = CSharedFunctions::CharArrayToShort(RAM, iVar12 + 0x800DCF6A);
  sVar2 = table800DCF68[iVar12 / 2];
  sVar3 = table800DCF68[iVar12 / 2 + 1];
  iVar12 = (int)(short)CSharedFunctions::CharArrayToShort(RAM, param_4);
  if (param_3 != 0) {
    bVar1 = CSharedFunctions::CharArrayToChar(RAM, param_1);
    lVar8 = lVar7;
    bVar5 = false;
    do {
      lVar7 = lVar6;
      iVar9 = (int)(char)bVar1;
      if (bVar5) {
        param_1 = param_1 + 1;
        iVar9 = ((int)(char)bVar1 << 0x1c) >> 0x18;
      }
      param_3 = param_3 + -1;
	 // uVar4 = (short)CSharedFunctions::CharArrayToShort(RAM, (iVar9 >> 4 & 0xf) * 2 + 0x800DCF84);
	  uVar4 = (short)table800DCF84[(iVar9 >> 4 & 0xf)];
      lVar6 = (__int64)(int)((sVar2 * iVar12 + (int)sVar3 * (int)lVar8 >> 8) + (iVar9 >> 4) * uVar11);
      if (lVar6 < 0x7fff) {
        if (lVar6 < -0x8000) {
          lVar6 = -0x8000;
        }
      }
      else {
        lVar6 = 0x7fff;
      }
	  CSharedFunctions::WriteShortToBuffer(RAM, param_2, (short)lVar6);
      uVar11 = uVar4 * uVar11 >> 8;
      iVar12 = (int)lVar6;
      if (uVar11 < 8) {
        uVar11 = 8;
      }
      bVar1 = CSharedFunctions::CharArrayToChar(RAM, param_1);
      lVar8 = lVar7;
      param_2 = param_2 + 1 * 2;
      bVar5 = (bool)(bVar5 ^ 1);
    } while (param_3 != 0);
  }
  CSharedFunctions::WriteShortToBuffer(RAM, param_4, (short)lVar6);
  CSharedFunctions::WriteShortToBuffer(RAM, param_4 + 1 * 2, (short)lVar7);
  return;
}


/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */

unsigned long FUN_000bd8a8(unsigned char* RAM, __int64 param_1, unsigned __int64 param_2, unsigned long param_3, int param_4, int compressedDataSpot)
{
	return compressedDataSpot;
  //return CSharedFunctions::CharArrayToLong(RAM, CSharedFunctions::CharArrayToLong(RAM, 0x801017d8)) + 4 * 4;

  /*
  //param_3 int;
  unsigned long ppiVar1; //int**
  unsigned long piVar2; //int*
  int iVar3;
  unsigned long ppiVar4; //int**
  unsigned long piVar5; //int*
  unsigned long ppiVar6; //int**
  unsigned long piVar7; //int*
  
  if (param_1 != 0) {
    piVar7 = (((int)param_1 + 0xf >> 4) + 1);
    if ((param_2 & 1) == 0) {
      ppiVar6 = CSharedFunctions::CharArrayToLong(RAM, CSharedFunctions::CharArrayToLong(RAM, 0x801017d8));
      do {
		piVar5 = CSharedFunctions::CharArrayToLong(RAM, ppiVar6 + 2 * 4);
        if ((int)piVar7 <= (int)piVar5) goto LAB_000bd92c;
        ppiVar6 = CSharedFunctions::CharArrayToLong(RAM, ppiVar6);
      } while (ppiVar6 != CSharedFunctions::CharArrayToLong(RAM, 0x801017d8));
    }
    else {
      ppiVar6 = CSharedFunctions::CharArrayToLong(RAM, CSharedFunctions::CharArrayToLong(RAM, 0x801017d8 + 1 * 4));
      do {
        piVar5 = CSharedFunctions::CharArrayToLong(RAM, ppiVar6 + 2 * 4);
        if ((int)piVar7 <= (int)piVar5) goto LAB_000bd92c;
        ppiVar6 = CSharedFunctions::CharArrayToLong(RAM, ppiVar6 + 1 * 4);
      } while (ppiVar6 != CSharedFunctions::CharArrayToLong(RAM, 0x801017d8));
    }
  }
  return 0x0;
LAB_000bd92c:
  ppiVar1 = CSharedFunctions::CharArrayToLong(RAM, ppiVar6 + 1 * 4);
  piVar2 = CSharedFunctions::CharArrayToLong(RAM, ppiVar6);
  if (piVar5 == piVar7) {
    CSharedFunctions::WriteLongToBuffer(RAM, ppiVar1, piVar2);
    CSharedFunctions::WriteLongToBuffer(RAM, (piVar2 + 1 * 4), (int)ppiVar1);
    CSharedFunctions::WriteLongToBuffer(RAM, CSharedFunctions::CharArrayToLong(RAM, ppiVar1 + 3 * 4), (-0x4a9dbc61 - ((int)CSharedFunctions::CharArrayToLong(RAM, ppiVar1) + (int)CSharedFunctions::CharArrayToLong(RAM, ppiVar1 + 1 * 4) + (int)CSharedFunctions::CharArrayToLong(RAM, ppiVar1 + 2 * 4))));
  }
  else {
    piVar5 = ((int)piVar5 - (int)piVar7);
    if ((param_2 & 1) != 0) {
      CSharedFunctions::WriteLongToBuffer(RAM, ppiVar6 + 2 * 4, piVar5);
      CSharedFunctions::WriteLongToBuffer(RAM, ppiVar6 + 3 * 4, (-0x4a9dbc61 - ((int)CSharedFunctions::CharArrayToLong(RAM, ppiVar6) + (int)CSharedFunctions::CharArrayToLong(RAM, ppiVar6 + 1 * 4) + (int)CSharedFunctions::CharArrayToLong(RAM, piVar5))));
      ppiVar6 = ppiVar6 + (int)piVar5 * 4 * 4;
      goto LAB_000bda1c;
    }
    ppiVar4 = ppiVar6 + (int)piVar7 * 4 * 4;
    CSharedFunctions::WriteLongToBuffer(RAM, ppiVar4, piVar2);
    CSharedFunctions::WriteLongToBuffer(RAM, ppiVar4 + 1 * 4, ppiVar1);
    CSharedFunctions::WriteLongToBuffer(RAM, ppiVar4 + 2 * 4, piVar5);
    CSharedFunctions::WriteLongToBuffer(RAM, ppiVar1, ppiVar4);
    CSharedFunctions::WriteLongToBuffer(RAM, piVar2 + 1 * 4, (int)ppiVar4);
    CSharedFunctions::WriteLongToBuffer(RAM, ppiVar1 + 3 * 4, (-0x4a9dbc61 - ((int)CSharedFunctions::CharArrayToLong(RAM, ppiVar1) + (int)CSharedFunctions::CharArrayToLong(RAM, ppiVar1 + 1 * 4) + (int)CSharedFunctions::CharArrayToLong(RAM, ppiVar1 + 2 * 4))));
    CSharedFunctions::WriteLongToBuffer(RAM, ppiVar4 + 3 * 4, (-0x4a9dbc61 - ((int)CSharedFunctions::CharArrayToLong(RAM, ppiVar4) + (int)CSharedFunctions::CharArrayToLong(RAM, ppiVar4 + 1 * 4) + (int)CSharedFunctions::CharArrayToLong(RAM, ppiVar4 + 2 * 4))));
  }
  CSharedFunctions::WriteLongToBuffer(RAM, piVar2 + 3 * 4, -0x4a9dbc61 - (CSharedFunctions::CharArrayToLong(RAM, piVar2) + CSharedFunctions::CharArrayToLong(RAM, piVar2 + 1 * 4) + CSharedFunctions::CharArrayToLong(RAM, piVar2 + 2 * 4)));
LAB_000bda1c:
  CSharedFunctions::WriteLongToBuffer(RAM, ppiVar6, param_3);
  CSharedFunctions::WriteLongToBuffer(RAM, ppiVar6 + 2 * 4, piVar7);
  piVar5 = (param_4 << 0x10 | CSharedFunctions::CharArrayToLong(RAM, 0x801017c0) | 1);
  CSharedFunctions::WriteLongToBuffer(RAM, 0x801017c0, CSharedFunctions::CharArrayToLong(RAM, 0x801017c0) + 2 & 0xfffe);
  CSharedFunctions::WriteLongToBuffer(RAM, ppiVar6 + 1 * 4, piVar5);
  iVar3 = CSharedFunctions::CharArrayToLong(RAM, 0x801017c8);
  CSharedFunctions::WriteLongToBuffer(RAM, 0x801017c4, CSharedFunctions::CharArrayToLong(RAM, 0x801017c4) - (int)piVar7);
  CSharedFunctions::WriteLongToBuffer(RAM, 0x801017cc, CSharedFunctions::CharArrayToLong(RAM, 0x801017cc) + (int)piVar7);
  CSharedFunctions::WriteLongToBuffer(RAM, ppiVar6 + 3 * 4, (-0x4a9dbc61 - ((int)param_3 + (int)piVar5 + (int)piVar7)));
  if (iVar3 < CSharedFunctions::CharArrayToLong(RAM, 0x801017cc)) {
    CSharedFunctions::WriteLongToBuffer(RAM, 0x801017c8, CSharedFunctions::CharArrayToLong(RAM, 0x801017cc));
  }
  return ppiVar6 + 4 * 4;*/
}

unsigned long FUN_000c12f0(unsigned char* RAM, unsigned long param_1, int compressedDataSpot)

{
  unsigned long SP = 0x800F4608;
  unsigned short uVar1;
  unsigned long uVar2;
  unsigned long uVar3;
  unsigned long puVar4Offset;
  unsigned long puVar5Offset;
  unsigned long uVar6;
  unsigned long puVar7Offset;
  unsigned long uVar8;
  unsigned long puVar9Offset;
  unsigned long auStack2096Offset = SP + 0x10; // short
  unsigned long auStack2088Offset = SP + 0x18; // byte
  
  if ((int)CSharedFunctions::CharArrayToLong(RAM, param_1 + 6 * 4) < 0x401) {
    uVar8 = CSharedFunctions::CharArrayToLong(RAM, param_1 + 1 * 4);
    puVar4Offset = FUN_000bd8a8(RAM, (uVar8 + 3 & 0xfffffffc) + 0x18, 0, 0x800dc5b0, 0x1de, compressedDataSpot);
    if (puVar4Offset != 0x0) {
      puVar7Offset = puVar4Offset + 6 * 4;
      uVar6 = CSharedFunctions::CharArrayToLong(RAM, param_1 + 1 * 4);
      uVar2 = CSharedFunctions::CharArrayToLong(RAM, param_1 + 2 * 4);
      uVar3 = CSharedFunctions::CharArrayToLong(RAM, param_1 + 3 * 4);
      CSharedFunctions::WriteLongToBuffer(RAM, puVar4Offset, CSharedFunctions::CharArrayToLong(RAM, param_1));
      CSharedFunctions::WriteLongToBuffer(RAM, puVar4Offset + 1 * 4, uVar6);
      CSharedFunctions::WriteLongToBuffer(RAM, puVar4Offset + 2 * 4, uVar2);
      CSharedFunctions::WriteLongToBuffer(RAM, puVar4Offset + 3 * 4, uVar3);
      uVar6 = CSharedFunctions::CharArrayToLong(RAM, param_1 + 5 * 4);
      CSharedFunctions::WriteLongToBuffer(RAM, puVar4Offset + 4 * 4, CSharedFunctions::CharArrayToLong(RAM, param_1 + 4 * 4));
      CSharedFunctions::WriteLongToBuffer(RAM, puVar4Offset + 5 * 4, uVar6);
      CSharedFunctions::WriteLongToBuffer(RAM, puVar4Offset, CSharedFunctions::CharArrayToLong(RAM, puVar4Offset) & 0xfffffff0 | 1);
      FUN_0000eba0(RAM, auStack2096Offset, 0, 4);
      puVar9Offset = param_1 + 8 * 4;
      if (0 < (int)uVar8) {
        do {
          uVar6 = CSharedFunctions::CharArrayToLong(RAM, param_1 + 6 * 4);
          if ((int)uVar8 < (int)CSharedFunctions::CharArrayToLong(RAM, param_1 + 6 * 4)) {
            uVar6 = uVar8;
          }
          uVar8 = uVar8 - uVar6;
		  unsigned long value800d67b0 = CSharedFunctions::CharArrayToLong(RAM, 0x800d67b0);
		  if (value800d67b0 != 0x0) {
			// seems to call 80010F94
            //functionPointer800d67b0(value800d67b0);
			//throw;
          }
          FUN_000dd0a4(RAM, puVar9Offset, auStack2088Offset, uVar6, auStack2096Offset);
          puVar9Offset = ((int)puVar9Offset + CSharedFunctions::CharArrayToLong(RAM, param_1 + 7 * 4));
          puVar5Offset = auStack2088Offset;
          while (uVar6 = uVar6 - 1, uVar6 != 0xffffffff) {
            uVar1 = CSharedFunctions::CharArrayToShort(RAM, puVar5Offset);
            puVar5Offset = puVar5Offset + 1 * 2;
			// 800c1440
			//unsigned char outputByte = CSharedFunctions::CharArrayToChar(RAM, ((uVar1 >> 3) + 0x800d46a4));
			unsigned char outputByte = outputSoundByteLookup[(uVar1 >> 3)];
			CSharedFunctions::WriteCharToBuffer(RAM, puVar7Offset, outputByte); // Write to output here
            puVar7Offset = ((int)puVar7Offset + 1);
          }
        } while (0 < (int)uVar8);
      }
	  CSharedFunctions::WriteCharToBuffer(RAM, (int)puVar7Offset + -1, 0);
      return puVar4Offset; //800c1484
    }
  }
  return 0x0;
}

unsigned long FUN_000c148c(unsigned char* RAM, unsigned long param_1, int compressedDataSpot)

{
	unsigned long jumpTable800DC5C0[5];
	jumpTable800DC5C0[0] = 0x800C14C4;
	jumpTable800DC5C0[1] = 0x800C14EC;
	jumpTable800DC5C0[2] = 0x800C14CC;
	jumpTable800DC5C0[3] = 0x800C14DC;
	jumpTable800DC5C0[4] = 0x800C14DC;

  unsigned long uVar1;
  unsigned long uVar2;
  
  uVar2 = (CSharedFunctions::CharArrayToLong(RAM, param_1) & 0xf) - 1;
  if (uVar2 < 5) {
    unsigned long jumpTable = 0x800DC5C0 + (uVar2 * 4);
	//unsigned long functionPointer = CSharedFunctions::CharArrayToLong(RAM, jumpTable);
	unsigned long functionPointer = jumpTable800DC5C0[uVar2]; // changed over to fixed table above
	if (functionPointer == 0x800C14C4)
	{
		throw; // TODO
	}
	else if (functionPointer == 0x800C14CC)
	{
		throw; // TODO
	}
	else if (functionPointer == 0x800C14DC)
	{
		uVar1 = FUN_000c12f0(RAM, param_1, compressedDataSpot);
	}
	else if (functionPointer == 0x800C14EC)
	{
		throw; // TODO
	}
	else
	{
		throw; // Shouldn't be possible
	}
    return uVar1;
  }
  return 0;
}

unsigned long functionCall800bc37c(unsigned char* RAM, unsigned long functionPointer, unsigned long param_1, int compressedDataSpot)
{
	if (functionPointer == 0x800C148C)
	{
		return FUN_000c148c(RAM, param_1, compressedDataSpot);
	}
	else
	{
		throw; // TODO
	}
}

void FUN_000bc2f0(unsigned char* RAM, unsigned long compressedDataSpot)

{
  unsigned long param_1 = compressedDataSpot;

  unsigned long puVar1Offset;
  unsigned long puVar2Offset = param_1;
  if (1 < (CSharedFunctions::CharArrayToLong(RAM, puVar2Offset)) & 0xf) {
    if (CSharedFunctions::CharArrayToLong(RAM, 0x800d66ac) == 0x0) { // Function pointer 
      //FUN_0000eb48(1);
      throw; // TODO
    }
    else {
	  unsigned long sizePlus1C = (CSharedFunctions::CharArrayToLong(RAM, puVar2Offset + 4) + 0x1c);
      if (CSharedFunctions::CharArrayToLong(RAM, 0x800d66b4) < sizePlus1C) { // 0x25800 max buffer size check?
        throw;
      }
	  FUN_000aefc4(RAM, CSharedFunctions::CharArrayToLong(RAM, 0x800d66b0) /*80600000*/, puVar2Offset, sizePlus1C);
      FUN_000bdaa4(RAM, param_1);
	  puVar2Offset = CSharedFunctions::CharArrayToLong(RAM, 0x800d66b0);

	  unsigned long jalrV0 = CSharedFunctions::CharArrayToLong(RAM, 0x800d66ac);
      puVar1Offset = functionCall800bc37c(RAM, jalrV0, puVar2Offset, compressedDataSpot);
      if (puVar1Offset == 0x0) {
        //FUN_0000eb48(1);
		throw; // seems like error case?
      }
      if (puVar2Offset != CSharedFunctions::CharArrayToLong(RAM, 0x800d66b0)) {
        FUN_000bdaa4(RAM, puVar2Offset);
      }
      if (puVar1Offset == CSharedFunctions::CharArrayToLong(RAM, 0x800d66b0)) {
        puVar2Offset = FUN_000bd8a8(RAM, CSharedFunctions::CharArrayToLong(RAM, puVar2Offset + 1 * 4) + 0x1c, 0, 0x800dc280,0x67b, compressedDataSpot);
        FUN_000aefc4(RAM, puVar2Offset,  puVar1Offset, CSharedFunctions::CharArrayToLong(RAM, puVar2Offset + 1 * 2) + 0x1c);
        CSharedFunctions::WriteLongToBuffer(RAM, param_1, puVar2Offset);
      }
      else {
        CSharedFunctions::WriteLongToBuffer(RAM, param_1, puVar1Offset);
      }
    }
  }
  return;
}

bool CExciteBikeSAMAudioDecompression::DecompressSound(unsigned char* outputSfx, int currentSAMOffset, CString outputWavStr, float samplingRateFloat)
{
	if (CSharedFunctions::CharArrayToLong(&outputSfx[currentSAMOffset]) == 0x53414D00) // SAM
	{
		int sizeSAM = CSharedFunctions::Flip32Bit(CSharedFunctions::CharArrayToLong(&outputSfx[currentSAMOffset + 4]));
		int waveType = CSharedFunctions::CharArrayToLong(&outputSfx[currentSAMOffset + 8]);
		if (waveType != 5)
		{
			waveType = waveType;
		}
		int uncompressedLen = CSharedFunctions::CharArrayToLong(&outputSfx[currentSAMOffset + 0xC]);
		int samplingRate = CSharedFunctions::CharArrayToLong(&outputSfx[currentSAMOffset + 0x18]);

		int sizeRAM = 0x800000;
		unsigned char* RAM = new unsigned char[sizeRAM];
		for (int x = 0; x < (sizeRAM & 0xFFFFFF); x++)
			RAM[x] = 0x00;

		CSharedFunctions::WriteLongToBuffer(RAM, 0x800d66ac, 0x800C148C); // function pointer for writing sound out
		CSharedFunctions::WriteLongToBuffer(RAM, 0x800d66b4 & 0xFFFFFF, 0x00025800); // max buffer size for sound
		CSharedFunctions::WriteLongToBuffer(RAM, 0x800d66b0, 0x80600000); // temp write spot

		unsigned char outputSpot = 0x8013D1E0; // Could be any spot as long as not interfering, and needs -0x10 behind it, 0x80000010 is ok.  
		memcpy(&RAM[outputSpot & 0xFFFFFF], &outputSfx[currentSAMOffset + 8], sizeSAM);
		FUN_000bc2f0(RAM, outputSpot);
		SaveWav(&RAM[(outputSpot + 0x18) & 0xFFFFFF], uncompressedLen, waveType, samplingRateFloat, outputWavStr); // 21

		delete [] RAM;

		return true;
	}
	else
	{
		return false;
	}
}

bool CExciteBikeSAMAudioDecompression::SaveWav(unsigned char* wavData, int len, int waveType, int samplingRate, CString outputFilename)
{
	int processedWavDataLength = len * 2;
	unsigned char* processedWavData = new unsigned char[processedWavDataLength];
	for (int x = 0; x < len; x++)
	{
		// Little endian
		processedWavData[x * 2 + 1] = ((lookupTable[wavData[x]] >> 8) & 0xFF);
		processedWavData[x * 2 + 0] = lookupTable[wavData[x]] & 0xFF;
	}

	bool result = SaveProcessedWav(processedWavData, processedWavDataLength, waveType, samplingRate, outputFilename);
	delete [] processedWavData;
	return result;
}

bool CExciteBikeSAMAudioDecompression::SaveProcessedWav(unsigned char* processedWavData, int processedWavDataLength, int waveType, int samplingRate, CString outputFilename)
{
	/*FILE* a = fopen(outputFilename + ".bin", "wb");
	fwrite(wavData, 1, len, a);
	fflush(a);
	fclose(a);*/

	/*FILE* aa = fopen("C:\\temp\\smp2.bin", "wb");
	fwrite(processedWavData, 1, processedWavDataLength, aa);
	fflush(aa);
	fclose(aa);*/

	float samplingRateFloat = samplingRate;

	int flags = 1; //(waveType == 5); //0 = 8bit, 1=16bit

	FILE* outFileTempRaw = fopen(outputFilename, "wb");
	if (outFileTempRaw == NULL)
	{
		MessageBox(NULL, "Cannot open temporary file", "Error", NULL);
		return false;
	}

	unsigned char wavHeader[0x28];

	wavHeader[0x0] = 0x52;
	wavHeader[0x1] = 0x49;
	wavHeader[0x2] = 0x46;
	wavHeader[0x3] = 0x46;
	unsigned long chunkSize = 0x2C + processedWavDataLength;
	wavHeader[0x4] = ((chunkSize >> 0) & 0xFF);
	wavHeader[0x5] = ((chunkSize >> 8) & 0xFF);
	wavHeader[0x6] = ((chunkSize >> 16) & 0xFF);
	wavHeader[0x7] = ((chunkSize >> 24) & 0xFF);
	wavHeader[0x8] = 0x57;
	wavHeader[0x9] = 0x41;
	wavHeader[0xA] = 0x56;
	wavHeader[0xB] = 0x45;
	wavHeader[0xC] = 0x66;
	wavHeader[0xD] = 0x6D;
	wavHeader[0xE] = 0x74;
	wavHeader[0xF] = 0x20;
	wavHeader[0x10] = 0x10;
	wavHeader[0x11] = 0x00;
	wavHeader[0x12] = 0x00;
	wavHeader[0x13] = 0x00;
	wavHeader[0x14] = 0x01;
	wavHeader[0x15] = 0x00;
	wavHeader[0x16] = 0x01;
	wavHeader[0x17] = 0x00;
	wavHeader[0x18] = (((unsigned long)samplingRateFloat >> 0) & 0xFF);
	wavHeader[0x19] = (((unsigned long)samplingRateFloat >> 8) & 0xFF);
	wavHeader[0x1A] = (((unsigned long)samplingRateFloat >> 16) & 0xFF);
	wavHeader[0x1B] = (((unsigned long)samplingRateFloat >> 24) & 0xFF);
	wavHeader[0x1C] = ((((unsigned long)samplingRateFloat * (1 + (flags & 1))) >> 0) & 0xFF);
	wavHeader[0x1D] = ((((unsigned long)samplingRateFloat * (1 + (flags & 1))) >> 8) & 0xFF);
	wavHeader[0x1E] = ((((unsigned long)samplingRateFloat * (1 + (flags & 1))) >> 16) & 0xFF);
	wavHeader[0x1F] = ((((unsigned long)samplingRateFloat * (1 + (flags & 1))) >> 24) & 0xFF);
	wavHeader[0x20] = (1 + (flags & 1));
	wavHeader[0x21] = 0x00;
	wavHeader[0x22] = (((flags & 1) + 1) * 8);
	wavHeader[0x23] = 0x00;
	wavHeader[0x24] = 0x64;
	wavHeader[0x25] = 0x61;
	wavHeader[0x26] = 0x74;
	wavHeader[0x27] = 0x61;

	fwrite(wavHeader, 1, 0x28, outFileTempRaw );

	unsigned long length = processedWavDataLength;
	fwrite(&length, 1, 4, outFileTempRaw);

	if ((flags & 1) == 1)
	{
		fwrite(processedWavData, 1, processedWavDataLength, outFileTempRaw);
	}
	else
	{
		for (int r = 0; r < processedWavDataLength; r++)
		{
			int value = (signed char)processedWavData[r];
			value += 128;
			fwrite(&value, 1, 1, outFileTempRaw);

		}
	}

	fflush(outFileTempRaw);
	fclose(outFileTempRaw);

	return true;
}






void UndefinedFunction_000dc7c4(unsigned char* RAM, unsigned long param_1, unsigned long param_2, unsigned long param_3,
								int in_t0_lo, int in_t1_lo, int in_t2_lo, int in_t4_lo,
								unsigned __int64 in_t5, int in_t6_lo, int in_t7_lo)

{
	//param_1 = A0
	//param_2 = A1
	//param_3 = A2
	bool bVar1;
    int iVar2;
  
  do {
    bVar1 = in_t5 != 0;
    in_t5 = in_t5 ^ 1;
    if (bVar1) {
      param_1 = param_1 + 1;
      in_t4_lo = (int)(in_t4_lo << 0x1c) >> 0x18;
    }
    iVar2 = (in_t4_lo >> 4) * (unsigned long)CSharedFunctions::CharArrayToShort(RAM, in_t7_lo + in_t2_lo);
    if (iVar2 < 0x7fff) {
      if (iVar2 < -0x8000) {
        iVar2 = -0x8000;
      }
    }
    else {
      iVar2 = 0x7fff;
    }
    CSharedFunctions::WriteShortToBuffer(RAM, param_2, (short)iVar2);
    param_2 = param_2 + 1 * 2;
    in_t2_lo = in_t2_lo + (int)(char)CSharedFunctions::CharArrayToChar(RAM, in_t6_lo + (in_t4_lo >> 4));
    if (in_t2_lo < 0) {
      in_t2_lo = 0;
    }
    param_3 = param_3 + -1;
    in_t4_lo = (int)(char)CSharedFunctions::CharArrayToChar(RAM, param_1);
  } while (param_3 != 0);
  return;
}

void UndefinedFunction_000dc840(unsigned char* RAM, unsigned long param_1, unsigned long param_2, unsigned long param_3,
								int in_t0_lo, int in_t1_lo, int in_t2_lo, int in_t4_lo,
								unsigned __int64 in_t5, int in_t6_lo, int in_t7_lo)
{
  bool bVar1;

  do {
    bVar1 = in_t5 != 0;
    in_t5 = in_t5 ^ 1;
    if (bVar1) {
      param_1 = param_1 + 1;
      in_t4_lo = (int)(in_t4_lo << 0x1c) >> 0x18;
    }
    in_t0_lo = in_t0_lo + (in_t4_lo >> 4) * (unsigned long)CSharedFunctions::CharArrayToShort(RAM, in_t7_lo + in_t2_lo);
    if (in_t0_lo < 0x7fff) {
      if (in_t0_lo < -0x8000) {
        in_t0_lo = -0x8000;
      }
    }
    else {
      in_t0_lo = 0x7fff;
    }
    CSharedFunctions::WriteShortToBuffer(RAM, param_2, (short)in_t0_lo);
    param_2 = param_2 + 1 * 2;
    in_t2_lo = in_t2_lo + (int)(char)CSharedFunctions::CharArrayToChar(RAM, in_t6_lo + (in_t4_lo >> 4));
    if (in_t2_lo < 0) {
      in_t2_lo = 0;
    }
    param_3 = param_3 + -1;
    in_t4_lo = (int)(char)CSharedFunctions::CharArrayToChar(RAM, param_1);
  } while (param_3 != 0);
  return;
}

void UndefinedFunction_000dc8bc(unsigned char* RAM, unsigned long param_1, unsigned long param_2, unsigned long param_3,
								int in_t0_lo, int in_t1_lo, int in_t2_lo, int in_t4_lo,
								unsigned __int64 in_t5, int in_t6_lo, int in_t7_lo)

{
	//param_1 = A0
	//param_2 = A1
	//param_3 = A2

  bool bVar1;
  int iVar2;
  
  do {
    bVar1 = in_t5 != 0;
    in_t5 = in_t5 ^ 1;
    if (bVar1) {
      param_1 = param_1 + 1;
      in_t4_lo = (int)(in_t4_lo << 0x1c) >> 0x18;
    }
    iVar2 = (in_t0_lo * 3 - in_t1_lo >> 1) +
            (in_t4_lo >> 4) * (unsigned long)CSharedFunctions::CharArrayToShort(RAM, in_t7_lo + in_t2_lo);
    if (iVar2 < 0x7fff) {
      if (iVar2 < -0x8000) {
        iVar2 = -0x8000;
      }
    }
    else {
      iVar2 = 0x7fff;
    }
    CSharedFunctions::WriteShortToBuffer(RAM, param_2, (short)iVar2);
    param_2 = param_2 + 1 * 2;
    in_t2_lo = in_t2_lo + (int)(char)CSharedFunctions::CharArrayToChar(RAM, in_t6_lo + (in_t4_lo >> 4));
    if (in_t2_lo < 0) {
      in_t2_lo = 0;
    }
    param_3 = param_3 + -1;
	in_t4_lo = (int)(char)CSharedFunctions::CharArrayToChar(RAM, param_1);
    in_t1_lo = in_t0_lo;
    in_t0_lo = iVar2;
  } while (param_3 != 0);
  return;
}

void UndefinedFunction_000dc944(unsigned char* RAM, unsigned long param_1, unsigned long param_2, unsigned long param_3,
								int in_t0_lo, int in_t1_lo, int in_t2_lo, int in_t4_lo,
								unsigned __int64 in_t5, int in_t6_lo, int in_t7_lo)
{
  bool bVar1;
  int iVar2;

  do {
    bVar1 = in_t5 != 0;
    in_t5 = in_t5 ^ 1;
    if (bVar1) {
      param_1 = param_1 + 1;
      in_t4_lo = (int)(in_t4_lo << 0x1c) >> 0x18;
    }
    iVar2 = (in_t0_lo * 2 - in_t1_lo) + (in_t4_lo >> 4) * (unsigned long)CSharedFunctions::CharArrayToShort(RAM, in_t7_lo + in_t2_lo);
    if (iVar2 < 0x7fff) {
      if (iVar2 < -0x8000) {
        iVar2 = -0x8000;
      }
    }
    else {
      iVar2 = 0x7fff;
    }
    CSharedFunctions::WriteShortToBuffer(RAM, param_2, (short)iVar2);
    param_2 = param_2 + 1 * 2;
    in_t2_lo = in_t2_lo + (int)(char)CSharedFunctions::CharArrayToChar(RAM, in_t6_lo + (in_t4_lo >> 4));
    if (in_t2_lo < 0) {
      in_t2_lo = 0;
    }
    param_3 = param_3 + -1;
	in_t4_lo = (int)(char)CSharedFunctions::CharArrayToChar(RAM, param_1);
    in_t1_lo = in_t0_lo;
    in_t0_lo = iVar2;
  } while (param_3 != 0);
  return;
}



void Fun_000DC738(unsigned char* RAM, unsigned long A0, unsigned long A1, unsigned long A2)
{
	// A0 = 8013A8E0 location of compressed data
	// A1 = 8013AB10 Output
	// A2 = count?  0x80 to begin
	// Manual ghidra messed up
	unsigned long T6 = 0x800DC668;
	unsigned long T7 = 0x800DC678;

	int T1 = (int)(short)CSharedFunctions::CharArrayToShort(RAM, A0);
	int T0 = (int)(short)CSharedFunctions::CharArrayToShort(RAM, A0 + 2);
	unsigned long T2 = (unsigned char)CSharedFunctions::CharArrayToChar(RAM, A0 + 4);
	A0 = A0 + 5;
	T2 = T2 + T2;
	unsigned long T5 = T1 & 3;
	unsigned long AT = 0xFFFFFFFC;
	T1 = T1 & AT;
	A2 = A2 - 1;

	if (A2 != 0)
		CSharedFunctions::WriteShortToBuffer(RAM, A1, T1);
	
	A2 = A2 - 1;
	if (A2 != 0)
		CSharedFunctions::WriteShortToBuffer(RAM, A1 + 2, T0);
	A1 = A1 + 4;

	unsigned long V0 = 0x800DC79C;
	T5 = T5 << 3;

	V0 = V0 + T5;
	T5 = 0;

	// JR V0
	if (V0 == 0x800DC79C)
	{
		//800DC7AC
		signed char T4 = CSharedFunctions::CharArrayToChar(RAM, A0);
		UndefinedFunction_000dc7c4(RAM, A0, A1, A2, T0, T1, T2, (signed long)T4, T5, T6, T7);
	}
	else if (V0 == 0x800DC7A4)
	{
		//800DC7AC
		signed char T4 = CSharedFunctions::CharArrayToChar(RAM, A0);
		UndefinedFunction_000dc840(RAM, A0, A1, A2, T0, T1, T2, (signed long)T4, T5, T6, T7);
	}
	else if (V0 == 0x800DC7AC)
	{
		//800DC7AC
		signed char T4 = CSharedFunctions::CharArrayToChar(RAM, A0);
		UndefinedFunction_000dc8bc(RAM, A0, A1, A2, T0, T1, T2, (signed long)T4, T5, T6, T7);
	}
	else if (V0 == 0x800DC7B4)
	{
		//800DC7AC
		signed char T4 = CSharedFunctions::CharArrayToChar(RAM, A0);
		UndefinedFunction_000dc944(RAM, A0, A1, A2, T0, T1, T2, (signed long)T4, T5, T6, T7);
	}
	else
	{
		throw;
	}
}


/*void CExciteBikeSAMAudioDecompression::FUN_0004b6a0(unsigned char* RAM, unsigned long S2, unsigned long S1)
{
	unsigned long outputShorts = S1;
	// stuff

	// Actually read here but for now hardcode S1/S2

  // 8004B788
  unsigned long S3 = 0;
  do {
	unsigned long A0 = S2;
	unsigned long A1 = S1;
	
	unsigned long A2 = 0x80;
    Fun_000DC738(RAM, A0, A1, A2);
    S2 = S2 + 0x44;
    S3 = S3 + 1;
	S1 = S1 + 0x100;
  } while (S3 < 8);

  // more stuff

  // 8004bb88
  unsigned long A3 = 0x8B; // not right but ust try for now till do this section
  unsigned long S4 = 0x100; // not right but ust try for now till do this section

  // 8004bbb8
  S1 = outputShorts; // added manually
  unsigned long A0 = 0x80138790; // added manually

  S3 = 0;
  do
  {
	  unsigned long V0 = (int)(short)CSharedFunctions::CharArrayToShort(RAM, S1);
	  unsigned long V1 = S4 << 2;
	  unsigned long T2 = V0 * A3;
	  
	  S3 = S3 + 1;
	  V1 = V1 + A0;
	  V0 = S4 + 1;
	  S4 = V0 & 0x7FF;
	  V0 = (int)T2 >> 8;
	  CSharedFunctions::WriteLongToBuffer(RAM, V1, V0);
	  S1 = S1 + 2;
  } while (S3 < 0x80);

  //8004BBF4
  A1 = 0x80138790; // added manually
  A0 = S4 << 2;
  V0 = S4 + 1;
  V1 * A3





  // more stuff
}*/


/* WARNING: Removing unreachable block (ram,0x0004b940) */
/* WARNING: Removing unreachable block (ram,0x0004b98c) */
/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */
/* WARNING: Restarted to delay deadcode elimination for space: ram */
int FUN_0004b6a0(unsigned char* RAM)
{
  unsigned short uVar1;
  bool bVar2;
  __int64 lVar3;
  int uVar4;
  int uVar5;
  int iVar6;
  unsigned long puVar7Offset; // unsigned short
  unsigned long puVar8Offset; // unsigned short
  int piVar9Offset; // int
  int piVar10Offset; // int
  int iVar11;
  unsigned long puVar12Offset; // unsigned short
  int iVar13;
  int iVar14;
  int iVar15;
  int iVar16;
  unsigned int unaff_s4_lo;
  unsigned int uVar17;
  int iVar18;
  int iVar19;
  
  //FUN_0004c454();
  iVar18 = CSharedFunctions::CharArrayToLong(RAM, 0x800c3b88);
  if (CSharedFunctions::CharArrayToLong(RAM, 0x800efe6c) == 0) {
    iVar18 = CSharedFunctions::CharArrayToLong(RAM, 0x800cb880);
  }
  CSharedFunctions::WriteLongToBuffer(RAM, CSharedFunctions::CharArrayToLong(RAM, 0x800f0eb4 + 0xe0), iVar18 * CSharedFunctions::CharArrayToLong(RAM, 0x800e4430) >> 8);
  iVar18 = 0;
  if (0 < CSharedFunctions::CharArrayToLong(RAM, 0x800efe5c)) {
    iVar19 = 0; // S5
    do {
      iVar11 = CSharedFunctions::CharArrayToLong(RAM, 0x800f0eb4) + iVar19;
      if (-1 < (int)CSharedFunctions::CharArrayToLong(RAM, iVar11 + 4)) {
        lVar3 = 3; //FUN_000bfecc();
        if (lVar3 != 3) {
          return 0;
        }
        //FUN_000bff2c();
        CSharedFunctions::WriteLongToBuffer(RAM, iVar11 + 4, 0xffffffff);
        if (-1 < (int)CSharedFunctions::CharArrayToLong(RAM, iVar11 + 0x38)) {
          iVar15 = 0;
          //FUN_000adb70((int)CSharedFunctions::CharArrayToLong(RAM, iVar11 + 8),0x220);
          iVar13 = (int)CSharedFunctions::CharArrayToLong(RAM, iVar11 + 8);
          int outputSpot = (int)CSharedFunctions::CharArrayToLong(RAM, iVar11 + 0xC);
          do {
            Fun_000DC738(RAM, iVar13, outputSpot, 0x80);

            iVar13 = iVar13 + 0x44;
            iVar15 = iVar15 + 1;
			outputSpot += 0x100;
          } while (iVar15 < 8);

		  CSharedFunctions::WriteLongToBuffer(RAM, iVar11 + 0x2c, (int)CSharedFunctions::CharArrayToLong(RAM, iVar11 + 0x34));
          CSharedFunctions::WriteLongToBuffer(RAM, iVar11 + 0x30, (int)CSharedFunctions::CharArrayToLong(RAM, iVar11 + 0x38));
          if ((int)CSharedFunctions::CharArrayToLong(RAM, iVar11 + 0x3c) != 0) {
            puVar12Offset = CSharedFunctions::CharArrayToLong(RAM, iVar11 + 0xc);
            for (iVar11 = (int)CSharedFunctions::CharArrayToLong(RAM, iVar11 + 0x18) << 7; iVar11 != 0; iVar11 = iVar11 + -1) {
              puVar7Offset = ((int)CSharedFunctions::CharArrayToLong(RAM, 0x800f0ee4) * 2 + 0x800EFE70);
			  iVar13 = (int)(short)CSharedFunctions::CharArrayToShort(RAM, puVar12Offset) + ((int)((unsigned long)CSharedFunctions::CharArrayToShort(RAM, puVar7Offset) << 0x10) >> 0x11);
              if (0x7fff < iVar13) {
                iVar13 = 0x7fff;
              }
              if (iVar13 < -0x7fff) {
                iVar13 = -0x7fff;
              }
              CSharedFunctions::WriteShortToBuffer(RAM, puVar7Offset, (unsigned short)iVar13);
              CSharedFunctions::WriteShortToBuffer(RAM, puVar12Offset, (unsigned short)iVar13);
              puVar12Offset = puVar12Offset + 1 * 2;
			  iVar15 = CSharedFunctions::CharArrayToLong(RAM, 0x800f0ee4) + 1;
              iVar13 = iVar15;
              if (iVar15 < 0) {
                iVar13 = (int)CSharedFunctions::CharArrayToLong(RAM, 0x800f0ee4) + 0x800;
              }
              CSharedFunctions::WriteLongToBuffer(RAM, 0x800f0ee4, iVar15 + (iVar13 >> 0xb) * -0x800);
            }
          }
        }
      }
      iVar18 = iVar18 + 1;
      iVar19 = iVar19 + 0x4c;
    } while (iVar18 < (int)CSharedFunctions::CharArrayToLong(RAM, 0x800efe5c));
  }

  if ((CSharedFunctions::CharArrayToLong(RAM, 0x800cb88c) == 0) && (iVar18 = 0, CSharedFunctions::CharArrayToLong(RAM, 0x800f0eb0) < 0x781)) {
    bVar2 = false;
    if (0 < CSharedFunctions::CharArrayToLong(RAM, 0x800efe5c)) {
      iVar19 = 0;
      do {
        iVar11 = CSharedFunctions::CharArrayToLong(RAM, 0x800f0eb4) + iVar19;
        if ((int)CSharedFunctions::CharArrayToLong(RAM, iVar11 + 0x10) == (int)CSharedFunctions::CharArrayToLong(RAM, iVar11 + 0x30)) {
          if (((int)CSharedFunctions::CharArrayToLong(RAM, iVar11 + 0x14) < (int)CSharedFunctions::CharArrayToLong(RAM, iVar11 + 0x2c)) ||
             ((int)CSharedFunctions::CharArrayToLong(RAM, iVar11 + 0x2c) + 8 <= (int)CSharedFunctions::CharArrayToLong(RAM, iVar11 + 0x14))) goto LAB_0004b8fc;
        }
        else {
LAB_0004b8fc:
          if ((int)CSharedFunctions::CharArrayToLong(RAM, iVar11 + 0x10) < 0) {
            CSharedFunctions::WriteLongToBuffer(RAM, iVar11 + 0x30, 0xffffffff);
            CSharedFunctions::WriteLongToBuffer(RAM, iVar11 + 0x2c, (int)CSharedFunctions::CharArrayToLong(RAM, iVar11 + 0x14));
          }
          else {
            iVar13 = (int)CSharedFunctions::CharArrayToLong(RAM, iVar11 + 0x20) + (int)CSharedFunctions::CharArrayToLong(RAM, iVar11 + 0x14) * 0x44;
            CSharedFunctions::WriteLongToBuffer(RAM, iVar11 + 0x18, (unsigned long)(((int)CSharedFunctions::CharArrayToLong(RAM, iVar11 + 0x20) + (int)CSharedFunctions::CharArrayToLong(RAM, iVar11 + 0x24)) - iVar13) / 0x44);
            if (8 < (int)CSharedFunctions::CharArrayToLong(RAM, iVar11 + 0x18)) {
              CSharedFunctions::WriteLongToBuffer(RAM, iVar11 + 0x18, 8);
            }
            if ((int)CSharedFunctions::CharArrayToLong(RAM, iVar11 + 0x18) == 0) {
              if ((int)CSharedFunctions::CharArrayToLong(RAM, iVar11 + 0x40) != 0) {
                CSharedFunctions::WriteLongToBuffer(RAM, iVar13, (int)CSharedFunctions::CharArrayToLong(RAM, iVar11 + 0x20));
                CSharedFunctions::WriteLongToBuffer(RAM, iVar11 + 0x14, 0);
                CSharedFunctions::WriteLongToBuffer(RAM, iVar11 + 0x18, (unsigned int)CSharedFunctions::CharArrayToLong(RAM, iVar11 + 0x24) / 0x44);
                if (8 < (int)CSharedFunctions::CharArrayToLong(RAM, iVar11 + 0x18)) {
                  CSharedFunctions::WriteLongToBuffer(RAM, iVar11 + 0x18, 8);
                }
              }
              if ((int)CSharedFunctions::CharArrayToLong(RAM, iVar11 + 0x18) == 0) {
                CSharedFunctions::WriteLongToBuffer(RAM, iVar11 + 0x30, 0xffffffff);
                CSharedFunctions::WriteLongToBuffer(RAM, iVar11 + 0x10, 0xffffffff);
                CSharedFunctions::WriteLongToBuffer(RAM, iVar11 + 0x2c, (int)CSharedFunctions::CharArrayToLong(RAM, iVar11 + 0x14));
                if ((iVar18 == 3) && ((int)CSharedFunctions::CharArrayToLong(RAM, 0x800efe50) != 0)) {
                  CSharedFunctions::WriteLongToBuffer(RAM, 0x800efe50, 0);
                }
                goto LAB_0004ba20;
              }
            }
            uVar5 = 0; //FUN_000bfbc0(CSharedFunctions::CharArrayToLong(RAM, 0x80101b34),0,iVar13,(int)CSharedFunctions::CharArrayToLong(RAM, iVar11 + 8));
            bVar2 = true;
            CSharedFunctions::WriteLongToBuffer(RAM, iVar11 + 4, uVar5);
            CSharedFunctions::WriteLongToBuffer(RAM, iVar11 + 0x38, (int)CSharedFunctions::CharArrayToLong(RAM, iVar11 + 0x10));
            CSharedFunctions::WriteLongToBuffer(RAM, iVar11 + 0x34, (int)CSharedFunctions::CharArrayToLong(RAM, iVar11 + 0x14));
          }
        }
LAB_0004ba20:
        iVar19 = iVar19 + 0x4c;
        iVar18 = iVar18 + 1;
      } while (iVar18 < CSharedFunctions::CharArrayToLong(RAM, 0x800efe5c));
    }
    uVar4 = 0;
    if (!bVar2) {
      bVar2 = false;
      iVar18 = 0;
      if (0 < CSharedFunctions::CharArrayToLong(RAM, 0x800efe5c)) {
        iVar19 = 0;
        do {
          iVar11 = CSharedFunctions::CharArrayToLong(RAM, 0x800f0eb4) + iVar19;
          puVar12Offset = ((int)CSharedFunctions::CharArrayToLong(RAM, iVar11 + 0xc) + ((int)CSharedFunctions::CharArrayToLong(RAM, iVar11 + 0x14) - (int)CSharedFunctions::CharArrayToLong(RAM, iVar11 + 0x2c)) * 0x100);
          if ((int)CSharedFunctions::CharArrayToLong(RAM, iVar11 + 0x18) < 1) {
            CSharedFunctions::WriteLongToBuffer(RAM, iVar11 + 0x30, 0xffffffff);
          }
          if ((int)CSharedFunctions::CharArrayToLong(RAM, iVar11 + 0x30) == -1) {
            if ((int)CSharedFunctions::CharArrayToLong(RAM, iVar11 + 0x3c) != 0) {
              puVar12Offset = CSharedFunctions::CharArrayToLong(RAM, iVar11 + 0xc);
              if (((unsigned int)CSharedFunctions::CharArrayToLong(RAM, iVar11 + 0x1c) & 3) != 3) {
                if (-1 < (int)CSharedFunctions::CharArrayToLong(RAM, iVar11 + 0x44)) {
                  //FUN_0000eba0(puVar12Offset,0,0x100);
                }
                iVar13 = 0x80;
                puVar7Offset = puVar12Offset;
                do {
                  puVar8Offset = (CSharedFunctions::CharArrayToLong(RAM, 0x800f0ee4) * 2 + -0x7ff10190);
                  iVar15 = (int)(short)CSharedFunctions::CharArrayToShort(RAM, puVar7Offset) + ((int)((unsigned int)CSharedFunctions::CharArrayToShort(RAM, puVar8Offset) << 0x10) >> 0x11);
                  if (0x7fff < iVar15) {
                    iVar15 = 0x7fff;
                  }
                  if (iVar15 < -0x7fff) {
                    iVar15 = -0x7fff;
                  }
                  CSharedFunctions::WriteShortToBuffer(RAM, puVar8Offset, (unsigned short)iVar15);
                  CSharedFunctions::WriteShortToBuffer(RAM, puVar7Offset, (unsigned short)iVar15);
                  puVar7Offset = puVar7Offset + 1 * 2;
                  iVar16 = CSharedFunctions::CharArrayToLong(RAM, 0x800f0ee4) + 1;
                  iVar15 = iVar16;
                  if (iVar16 < 0) {
                    iVar15 = CSharedFunctions::CharArrayToLong(RAM, 0x800f0ee4) + 0x800;
                  }
                  CSharedFunctions::WriteLongToBuffer(RAM, 0x800f0ee4, iVar16 + (iVar15 >> 0xb) * -0x800);
                  iVar13 = iVar13 + -1;
                } while (iVar13 != 0);
                iVar13 = (int)CSharedFunctions::CharArrayToLong(RAM, iVar11 + 0x44) + 1;
                CSharedFunctions::WriteLongToBuffer(RAM, iVar11 + 0x44, iVar13);
                if (0x1f < iVar13) {
                  CSharedFunctions::WriteLongToBuffer(RAM, iVar11 + 0x3c, 0);
                }
              }
              goto LAB_0004bb88;
            }
          }
          else {
            CSharedFunctions::WriteLongToBuffer(RAM, iVar11 + 0x44, 0xffffffff);
LAB_0004bb88:
            iVar15 = CSharedFunctions::CharArrayToLong(RAM, 0x800efe54);
            iVar13 = CSharedFunctions::CharArrayToLong(RAM, (iVar19 + CSharedFunctions::CharArrayToLong(RAM, 0x800f0eb4) + 0x48));
            if (((unsigned long)CSharedFunctions::CharArrayToLong(RAM, iVar11 + 0x1c) & 1) == 0) {
              iVar16 = 0;
              unaff_s4_lo = CSharedFunctions::CharArrayToLong(RAM, 0x800efe60);
              if (bVar2) {
                do {
                  iVar6 = unaff_s4_lo * 4;
                  unaff_s4_lo = unaff_s4_lo + 1 & 0x7ff;
                  iVar16 = iVar16 + 1;
                  piVar9Offset = (iVar6 + iVar15);
				  CSharedFunctions::WriteLongToBuffer(RAM, piVar9Offset, (int)CSharedFunctions::CharArrayToLong(RAM, piVar9Offset) + ((short)CSharedFunctions::CharArrayToShort(RAM, puVar12Offset) * iVar13 >> 8));
                  puVar12Offset = puVar12Offset + 1 * 2;
                } while (iVar16 < 0x80);
              }
              else {
                do {
                  iVar6 = unaff_s4_lo * 4;
                  iVar16 = iVar16 + 1;
                  unaff_s4_lo = unaff_s4_lo + 1 & 0x7ff;
				  CSharedFunctions::WriteLongToBuffer(RAM, iVar6 + iVar15, (short)CSharedFunctions::CharArrayToShort(RAM, puVar12Offset) * iVar13 >> 8);
                  puVar12Offset = puVar12Offset + 1 * 2;
                } while (iVar16 < 0x80);
              }
			  
              CSharedFunctions::WriteLongToBuffer(RAM, iVar11 + 0x14, (int)CSharedFunctions::CharArrayToLong(RAM, iVar11 + 0x14) + 1);
              CSharedFunctions::WriteLongToBuffer(RAM, iVar11 + 0x18, (int)CSharedFunctions::CharArrayToLong(RAM, iVar11 + 0x18) + -1);
            }
            else {
              if (((unsigned int)CSharedFunctions::CharArrayToLong(RAM, iVar11 + 0x1c) & 2) != 0) {
                puVar12Offset = puVar12Offset + 0x40 * 2;
                CSharedFunctions::WriteLongToBuffer(RAM, iVar11 + 0x14, (int)CSharedFunctions::CharArrayToLong(RAM, iVar11 + 0x14) + 1);
                CSharedFunctions::WriteLongToBuffer(RAM, iVar11 + 0x18, (int)CSharedFunctions::CharArrayToLong(RAM, iVar11 + 0x18) + -1);
              }
			  unaff_s4_lo = CSharedFunctions::CharArrayToLong(RAM, 0x800efe60);
              CSharedFunctions::WriteLongToBuffer(RAM, iVar11 + 0x1c, (unsigned int)CSharedFunctions::CharArrayToLong(RAM, iVar11 + 0x1c) ^ 2);
              iVar15 = CSharedFunctions::CharArrayToLong(RAM, 0x800efe54);
              if (!bVar2) {
                iVar16 = 0;
                do {
                  iVar6 = unaff_s4_lo * 4;
                  uVar17 = unaff_s4_lo + 1 & 0x7ff;
                  uVar1 = (short)CSharedFunctions::CharArrayToShort(RAM, puVar12Offset);
                  puVar12Offset = puVar12Offset + 1 * 2;
                  iVar16 = iVar16 + 1;
                  unaff_s4_lo = uVar17 + 1 & 0x7ff;
                  iVar14 = (short)uVar1 * iVar13 >> 8;
                  CSharedFunctions::WriteLongToBuffer(RAM, iVar6 + iVar15, (iVar14 + (int)CSharedFunctions::CharArrayToLong(RAM, iVar11 + 0x28)) / 2);
                  CSharedFunctions::WriteLongToBuffer(RAM, uVar17 * 4 + iVar15, iVar14);
                  CSharedFunctions::WriteLongToBuffer(RAM, iVar11 + 0x28, iVar14);
                } while (iVar16 < 0x40);
                bVar2 = true;
                goto LAB_0004bd78;
              }
              iVar16 = 0;
              do {
                iVar6 = unaff_s4_lo * 4;
                uVar17 = unaff_s4_lo + 1 & 0x7ff;
				uVar1 = CSharedFunctions::CharArrayToShort(RAM, puVar12Offset);
                unaff_s4_lo = uVar17 + 1 & 0x7ff;
                puVar12Offset = puVar12Offset + 1 * 2;
                piVar9Offset = (iVar6 + iVar15);
                piVar10Offset = (uVar17 * 4 + iVar15);
                iVar6 = (short)uVar1 * iVar13 >> 8;
                CSharedFunctions::WriteLongToBuffer(RAM, piVar9Offset, (int)CSharedFunctions::CharArrayToLong(RAM, piVar9Offset) + (iVar6 + (int)CSharedFunctions::CharArrayToLong(RAM, iVar11 + 0x28)) / 2);
                iVar16 = iVar16 + 1;
                CSharedFunctions::WriteLongToBuffer(RAM, piVar10Offset, (int)CSharedFunctions::CharArrayToLong(RAM, piVar10Offset) + iVar6);
                CSharedFunctions::WriteLongToBuffer(RAM, iVar11 + 0x28, iVar6);
              } while (iVar16 < 0x40);
            }
            bVar2 = true;
          }
LAB_0004bd78:
          iVar18 = iVar18 + 1;
          iVar19 = iVar19 + 0x4c;
        } while (iVar18 < CSharedFunctions::CharArrayToLong(RAM, 0x800efe5c));
      }
      iVar18 = CSharedFunctions::CharArrayToLong(RAM, 0x800efe54);
      if (!bVar2) {
        iVar19 = 0x7f;
        do {
          CSharedFunctions::WriteLongToBuffer(RAM, CSharedFunctions::CharArrayToLong(RAM, 0x800efe60) * 4 + iVar18,  0);
          iVar19 = iVar19 + -1;
          unaff_s4_lo = CSharedFunctions::CharArrayToLong(RAM, 0x800efe60) + 1 & 0x7ff;
          CSharedFunctions::WriteLongToBuffer(RAM, 0x800efe60, unaff_s4_lo);
        } while (-1 < iVar19);
      }
      CSharedFunctions::WriteLongToBuffer(RAM, 0x800f0eb0, CSharedFunctions::CharArrayToLong(RAM, 0x800f0eb0) + 0x80);
      CSharedFunctions::WriteLongToBuffer(RAM, 0x800f0e84, CSharedFunctions::CharArrayToLong(RAM, 0x800f0e84) + 1);
      CSharedFunctions::WriteLongToBuffer(RAM, 0x800efe60, unaff_s4_lo);
      //FUN_0004be24();
      uVar4 = 1;
    }
  }
  else {
    uVar4 = 0;
  }

		/*FILE* a = fopen("C:\\temp\\ram.bin", "wb");
		fwrite(RAM, 1, 0x800000, a);
		fflush(a);
		fclose(a);*/

  /*FILE* a = fopen("C:\\temp\\a.txt", "w");
  for (int x = 0; x < addresses.size(); x++)
  {
		fprintf(a, "0x%08X,%08X\n", addresses[x], addressesValues[x]);
  }
  fflush(a);
  fclose(a);*/

  return uVar4;
}

void CExciteBikeSAMAudioDecompression::FUN_0004f5f8(unsigned char* RAM)

{
  int lVar1;
  
  if (CSharedFunctions::CharArrayToLong(RAM, 0x800cb874) != 0) {
    do {
      lVar1 = FUN_0004b6a0(RAM);
    } while (lVar1 != 0);
  }
  return;
}



/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */
// Copies to stereo at output spot listed in A0
void FUN_0004f480(unsigned char* RAM, int param_1, int param_2)

{
  int iVar1;
  
  if ( CSharedFunctions::CharArrayToLong(RAM, 0x800f0eb0) < param_2) {
    param_2 = CSharedFunctions::CharArrayToLong(RAM, 0x800f0eb0);
  }
  iVar1 = CSharedFunctions::CharArrayToLong(RAM, 0x800f0eb0) - param_2;
  if (CSharedFunctions::CharArrayToLong(RAM, 0x800cb88c) == 0) {
    for (; CSharedFunctions::WriteLongToBuffer(RAM, 0x800f0eb0, iVar1), param_2 != 0; param_2 = param_2 + -1) {
      CSharedFunctions::WriteLongToBuffer(RAM, param_1, (int)CSharedFunctions::CharArrayToLong(RAM, param_1) + CSharedFunctions::CharArrayToLong(RAM, (CSharedFunctions::CharArrayToLong(RAM, 0x800f0ee0) * 4 + CSharedFunctions::CharArrayToLong(RAM, 0x800efe54))));
      CSharedFunctions::WriteLongToBuffer(RAM, param_1 + 1 * 4, (int)CSharedFunctions::CharArrayToLong(RAM, param_1 + 1 * 4) + (int)CSharedFunctions::CharArrayToLong(RAM, (CSharedFunctions::CharArrayToLong(RAM, 0x800f0ee0) * 4 + CSharedFunctions::CharArrayToLong(RAM, 0x800efe54))));
      param_1 = param_1 + 2;
      CSharedFunctions::WriteLongToBuffer(RAM, 0x800f0ee0, CSharedFunctions::CharArrayToLong(RAM, 0x800f0ee0) + 1 & 0x7ff);
      CSharedFunctions::WriteLongToBuffer(RAM, iVar1, CSharedFunctions::CharArrayToLong(RAM, 0x800f0eb0));
    }
  }
  return;
}


int CExciteBikeSAMAudioDecompression::GetInstrumentSlot(int id, std::vector<EBSoundIdx> ebSoundIndexes)
{
	for (int x = 0; x < ebSoundIndexes.size(); x++)
	{
		if (ebSoundIndexes[x].index == id)
			return x;
	}
	return -1;
}

bool CExciteBikeSAMAudioDecompression::DecodeSNG(unsigned char* sngFile, int sngFileOffset, CString outputFile, std::vector<EBSoundIdx> ebSoundIndexes, float samplingRateFloat)
{
	if (CSharedFunctions::CharArrayToLong(&sngFile[sngFileOffset]) == 0x534E4700) // SNG
	{
		int sizeSNG = CSharedFunctions::Flip32Bit(CSharedFunctions::CharArrayToLong(&sngFile[sngFileOffset + 4]));
		int numberInstruments = CSharedFunctions::CharArrayToLong(&sngFile[sngFileOffset + 8]);

		int spot = 0xC + (numberInstruments * 8);


		

		int MAXTEMPSIZE = 0x2000000;
		int NUMTRACKS = 4;
		bool** used = new bool*[NUMTRACKS];
		unsigned char** result = new unsigned char*[NUMTRACKS];
		for (int y = 0; y < NUMTRACKS; y++)
		{
			used[y] = new bool[MAXTEMPSIZE / 2];
			for (int x = 0; x < MAXTEMPSIZE / 2; x++)
			{	
				used[y][x] = false;
			}
			result[y] = new unsigned char[MAXTEMPSIZE];
			for (int x = 0; x < MAXTEMPSIZE; x++)
			{	
				result[y][x] = 0;
			}
		}

		int maxResultSize = 0;
		spot = 0xC + (numberInstruments * 8);

		while (true)
		{
			maxResultSize = CSharedFunctions::CharArrayToShort(&sngFile[sngFileOffset + spot]);

			if (sngFile[sngFileOffset + spot + 2] == 0xFE)
				break;

			spot += 4;
		}

		int maxResultSizeSamples = maxResultSize * 128;


		for (int track = 0; track < NUMTRACKS; track++)
		{
			// Reset
			spot = 0xC + (numberInstruments * 8);

			while (true)
			{
				int instrumentIndex = -1;
				int trackIndex = sngFile[sngFileOffset + spot + 3];

				if (trackIndex == track)
				{
					instrumentIndex = sngFile[sngFileOffset + spot + 2];
					if (instrumentIndex != 0xFF)
					{
						instrumentIndex = CSharedFunctions::CharArrayToLong(&sngFile[sngFileOffset + 0xC + (instrumentIndex * 8)]);
						instrumentIndex = GetInstrumentSlot(instrumentIndex, ebSoundIndexes);
						if (instrumentIndex == -1)
						{
							for (int y = 0; y < NUMTRACKS; y++)
							{
								delete [] result[y];
								delete [] used[y];
							}
							delete [] used;
							delete [] result;
							return false;
						}
					}
					else // Silence
					{
						if (sngFile[sngFileOffset + spot + 2] == 0xFE)
							break;

						spot += 4;
						continue;
					}
				}
				else
				{
					// Not applying to track
					if (sngFile[sngFileOffset + spot + 2] == 0xFE)
						break;

					spot += 4;
					continue;
				}

				int lengthMultiplier = 128;

				unsigned short timeStamp = CSharedFunctions::CharArrayToShort(&sngFile[sngFileOffset + spot]);
				unsigned short timeStampNext = maxResultSizeSamples;

				while (true)
				{
					spot += 4;
					int trackIndexSub = sngFile[sngFileOffset + spot + 3];

					if (trackIndexSub == track)
					{
						timeStampNext = CSharedFunctions::CharArrayToShort(&sngFile[sngFileOffset + spot]);
						break;
					}

					if (sngFile[sngFileOffset + spot + 2] == 0xFE)
						break;
				}

				int resultSize = 0;

				for (int y = 0; y < (timeStampNext - timeStamp) * lengthMultiplier; y++)
				{
					int instrumentSize =  ebSoundIndexes[instrumentIndex].dataLength;
					if (ebSoundIndexes[instrumentIndex].flags == 1)
					{
						//11025;
						// reverse endian
						if (y < instrumentSize)
						{
							if ((y % 2) == 0)
							{
								short soundData = ((ebSoundIndexes[instrumentIndex].data[y + 1] << 8) | (ebSoundIndexes[instrumentIndex].data[y]));
								result[track][(timeStamp * lengthMultiplier * 2) + resultSize] = (soundData >> 8) & 0xFF;
								result[track][(timeStamp * lengthMultiplier * 2) + resultSize + 1] = soundData & 0xFF;
								used[track][((timeStamp * lengthMultiplier * 2) + resultSize) /2] = true;
								resultSize += 2;
							}
							else
							{
								// Last sample
								if ((y + 1) == ((timeStampNext - timeStamp) * lengthMultiplier))
								{
									// Skip?
								}
								else
								{
									// Interpolate
									short soundDataPrev = ((ebSoundIndexes[instrumentIndex].data[y] << 8) | (ebSoundIndexes[instrumentIndex].data[y - 1]));
									short soundDataNext = ((ebSoundIndexes[instrumentIndex].data[y + 2] << 8) | (ebSoundIndexes[instrumentIndex].data[y + 1]));
									short soundData = ((int)soundDataPrev + (int)soundDataNext) / 2;

									result[track][(timeStamp * lengthMultiplier * 2) + resultSize] = (soundData >> 8) & 0xFF;
									result[track][(timeStamp * lengthMultiplier * 2) + resultSize + 1] = soundData & 0xFF;
									used[track][((timeStamp * lengthMultiplier * 2) + resultSize) /2] = true;
									resultSize += 2;
								}
							}
						}
						else
						{
							y = 9999999999;
							break;
						}
					}
					else
					{
						//22050
						// reverse endian
						if ((y * 2) < instrumentSize)
						{
							short soundData = ((ebSoundIndexes[instrumentIndex].data[y * 2 + 1] << 8) | (ebSoundIndexes[instrumentIndex].data[y * 2]));
							result[track][(timeStamp * lengthMultiplier * 2) + resultSize] = (soundData >> 8) & 0xFF;
							result[track][(timeStamp * lengthMultiplier * 2) + resultSize + 1] = soundData & 0xFF;
							used[track][((timeStamp * lengthMultiplier * 2) + resultSize) /2] = true;
							resultSize += 2;
						}
						else
						{
							y = 9999999999;
							break;
						}
					}
				}

				if (sngFile[sngFileOffset + spot + 2] == 0xFE)
					break;
			}
		}

		unsigned char* resultCombined = new unsigned char[maxResultSizeSamples];
		for (int x = 0; x < maxResultSizeSamples; x++)
			resultCombined[x] = 0;

		// Merge
		for (int x = 0; x < maxResultSizeSamples; x+=2)
		{
			int count = 0;
			int sampleValue = 0;
			for (int track = 0; track < NUMTRACKS; track++)
			{
				if (used[track][x/2])
				{
					count++;
					sampleValue += (short)CSharedFunctions::CharArrayToShort(&result[track][x]);
				}
			}

			int resultSample = sampleValue;
			if (count > 1)
			{
				/*resultSample = (int)((double)sampleValue / (double)count);
				if (resultSample > 0x7FFF)
					resultSample = 0x7FFF;
				if (resultSample < (short)0x8000)
					resultSample = (short)0x8000;*/
			}

			
			// Flip endian again
			if (count > 0)
			{
				CSharedFunctions::WriteShortToBuffer(resultCombined, x, CSharedFunctions::Flip16Bit((short)resultSample));
			}
		}
		
		bool saved = SaveProcessedWav(resultCombined, maxResultSizeSamples, 5, samplingRateFloat, outputFile);
		/*for (int x = 0; x < maxResultSizeSamples; x+=2)
		{
			unsigned char value = result[0][x];
			result[0][x] = result[0][x+1];
			result[0][x+1] = value;

			value = result[1][x];
			result[1][x] = result[1][x+1];
			result[1][x+1] = value;
		}
		saved = SaveProcessedWav(result[0], maxResultSizeSamples, 5, samplingRateFloat, outputFile + "0.wav");
		saved = SaveProcessedWav(result[1], maxResultSizeSamples, 5, samplingRateFloat, outputFile + "1.wav");*/

		for (int y = 0; y < NUMTRACKS; y++)
		{
			delete [] result[y];
			delete [] used[y];
		}
		delete [] used;
		delete [] result;
		delete [] resultCombined;
		return saved;
	}
	else
	{
		return false;
	}
}

bool CExciteBikeSAMAudioDecompression::DecodeBIGSound(unsigned char* ROM, unsigned long offset, unsigned long size, CString outputWavStr, unsigned char*& data, int& sfxLength, float samplingRateFloat)
{
	data = NULL;

	int sizeRAM = 0x800000;
	unsigned char* RAM = new unsigned char[sizeRAM];
	for (int x = 0; x < (sizeRAM & 0xFFFFFF); x++)
		RAM[x] = 0x00;

	CSharedFunctions::WriteLongToBuffer(RAM, (0x000C3B88 & 0xFFFFFF), 0x000000C8);
	CSharedFunctions::WriteLongToBuffer(RAM, (0x000CB874 & 0xFFFFFF), 0x00000001);
	CSharedFunctions::WriteLongToBuffer(RAM, (0x000CB880 & 0xFFFFFF), 0x000000A0);
	CSharedFunctions::WriteLongToBuffer(RAM, (0x000CB88C & 0xFFFFFF), 0x00000000);
	CSharedFunctions::WriteLongToBuffer(RAM, (0x000E4430 & 0xFFFFFF), 0x000000FF);
	CSharedFunctions::WriteLongToBuffer(RAM, (0x000EFE54 & 0xFFFFFF), 0x80138790);
	CSharedFunctions::WriteLongToBuffer(RAM, (0x000EFE5C & 0xFFFFFF), 0x00000004);
	CSharedFunctions::WriteLongToBuffer(RAM, (0x000EFE60 & 0xFFFFFF), 0x00000100);
	CSharedFunctions::WriteLongToBuffer(RAM, (0x000EFE6C & 0xFFFFFF), 0x00000000);
	CSharedFunctions::WriteLongToBuffer(RAM, (0x000F0E84 & 0xFFFFFF), 0x00000000);
	CSharedFunctions::WriteLongToBuffer(RAM, (0x000F0EB0 & 0xFFFFFF), 0x00000100);
	CSharedFunctions::WriteLongToBuffer(RAM, (0x000F0EB4 & 0xFFFFFF), 0x8013A7A0);
	CSharedFunctions::WriteLongToBuffer(RAM, (0x000F0F94 & 0xFFFFFF), 0x8018FCA0);
	CSharedFunctions::WriteLongToBuffer(RAM, (0x0013A7A4 & 0xFFFFFF), 0x00000000);
	CSharedFunctions::WriteLongToBuffer(RAM, (0x0013A7A8 & 0xFFFFFF), 0x8013A8E0);
	CSharedFunctions::WriteLongToBuffer(RAM, (0x0013A7AC & 0xFFFFFF), 0x8013AB10);
	CSharedFunctions::WriteLongToBuffer(RAM, (0x0013A7B0 & 0xFFFFFF), 0x00000007);
	CSharedFunctions::WriteLongToBuffer(RAM, (0x0013A7B4 & 0xFFFFFF), 0x00000000);
	CSharedFunctions::WriteLongToBuffer(RAM, (0x0013A7B8 & 0xFFFFFF), 0x00000008);
	CSharedFunctions::WriteLongToBuffer(RAM, (0x0013A7BC & 0xFFFFFF), 0x00000000);
	CSharedFunctions::WriteLongToBuffer(RAM, (0x0013A7D4 & 0xFFFFFF), 0x00000000);
	CSharedFunctions::WriteLongToBuffer(RAM, (0x0013A7D8 & 0xFFFFFF), 0x00000007);
	CSharedFunctions::WriteLongToBuffer(RAM, (0x0013A7DC & 0xFFFFFF), 0x00000000);
	CSharedFunctions::WriteLongToBuffer(RAM, (0x0013A7E8 & 0xFFFFFF), 0x0000008B);
	CSharedFunctions::WriteLongToBuffer(RAM, (0x0013A7F0 & 0xFFFFFF), 0x00000001);
	CSharedFunctions::WriteLongToBuffer(RAM, (0x0013A7F4 & 0xFFFFFF), 0x8013B320);
	CSharedFunctions::WriteLongToBuffer(RAM, (0x0013A7F8 & 0xFFFFFF), 0x8013B550);
	CSharedFunctions::WriteLongToBuffer(RAM, (0x0013A7FC & 0xFFFFFF), 0x00000000);
	CSharedFunctions::WriteLongToBuffer(RAM, (0x0013A800 & 0xFFFFFF), 0x00000000);
	CSharedFunctions::WriteLongToBuffer(RAM, (0x0013A804 & 0xFFFFFF), 0x00000008);
	CSharedFunctions::WriteLongToBuffer(RAM, (0x0013A808 & 0xFFFFFF), 0x00000000);
	CSharedFunctions::WriteLongToBuffer(RAM, (0x0013A820 & 0xFFFFFF), 0x00000000);
	CSharedFunctions::WriteLongToBuffer(RAM, (0x0013A824 & 0xFFFFFF), 0x00000000);
	CSharedFunctions::WriteLongToBuffer(RAM, (0x0013A828 & 0xFFFFFF), 0x00000000);
	CSharedFunctions::WriteLongToBuffer(RAM, (0x0013A834 & 0xFFFFFF), 0x0000008B);
	CSharedFunctions::WriteLongToBuffer(RAM, (0x0013A83C & 0xFFFFFF), 0xFFFFFFFF);
	CSharedFunctions::WriteLongToBuffer(RAM, (0x0013A844 & 0xFFFFFF), 0x8013BF90);
	CSharedFunctions::WriteLongToBuffer(RAM, (0x0013A848 & 0xFFFFFF), 0xFFFFFFFF);
	CSharedFunctions::WriteLongToBuffer(RAM, (0x0013A84C & 0xFFFFFF), 0x00000000);
	CSharedFunctions::WriteLongToBuffer(RAM, (0x0013A850 & 0xFFFFFF), 0x00000000);
	CSharedFunctions::WriteLongToBuffer(RAM, (0x0013A864 & 0xFFFFFF), 0x00000000);
	CSharedFunctions::WriteLongToBuffer(RAM, (0x0013A868 & 0xFFFFFF), 0xFFFFFFFF);
	CSharedFunctions::WriteLongToBuffer(RAM, (0x0013A874 & 0xFFFFFF), 0x00000000);
	CSharedFunctions::WriteLongToBuffer(RAM, (0x0013A888 & 0xFFFFFF), 0xFFFFFFFF);
	CSharedFunctions::WriteLongToBuffer(RAM, (0x0013A890 & 0xFFFFFF), 0x8013C9D0);
	CSharedFunctions::WriteLongToBuffer(RAM, (0x0013A894 & 0xFFFFFF), 0xFFFFFFFF);
	CSharedFunctions::WriteLongToBuffer(RAM, (0x0013A898 & 0xFFFFFF), 0x00000000);
	CSharedFunctions::WriteLongToBuffer(RAM, (0x0013A89C & 0xFFFFFF), 0x00000000);
	CSharedFunctions::WriteLongToBuffer(RAM, (0x0013A8B0 & 0xFFFFFF), 0x00000000);
	CSharedFunctions::WriteLongToBuffer(RAM, (0x0013A8B4 & 0xFFFFFF), 0xFFFFFFFF);
	CSharedFunctions::WriteLongToBuffer(RAM, (0x0013A8C0 & 0xFFFFFF), 0x00000000);

	for (int x = 0; x < 96; x++)
	{
		CSharedFunctions::WriteShortToBuffer(RAM, (0x800DC654 & 0xFFFFFF) + (x * 2), table800DC654[x]);
	}



	unsigned long S2 = 0x8013A8E0; // location of compressed data
	unsigned long S1 = 0x8013AB10; // Output
	// 80138B90 Assembled Sound
	unsigned long S2SecondSpot = 0x8013B320;


	int soundcompressed2Spot = offset;
	int soundcompressed2Size = size;

	unsigned char* result = new unsigned  char[0x100000];
	int resultSize = 0;

	for (int x = 0; x < soundcompressed2Size; x+= 0x220)
	{
		for (int y = S2; y < S2 + 0x220; y++)
			RAM[y & 0xFFFFFF] = 0;

		//memcpy(&RAM[S2 & 0xFFFFFF], &ROM[soundcompressedSpot + x], 0x220);
		int sndCpyAmount = 0x220;
		if ((soundcompressed2Size - x) < 0x220)
		{
			sndCpyAmount = (soundcompressed2Size - x);
		}
		memcpy(&RAM[S2SecondSpot & 0xFFFFFF], &ROM[soundcompressed2Spot + x], sndCpyAmount);

		// Nullify
		for (int y = S2; y < S2 + 0x220; y++)
			RAM[y & 0xFFFFFF] = 0;

		//for (int y = S2SecondSpot; y < S2SecondSpot + 0x220; y++)
			//RAM[y & 0xFFFFFF] = 0;

		FUN_0004f5f8(RAM);

		//if (x > 0x220)
			//break;

		//if (CEBBigDecompression::CSharedFunctions::CharArrayToLong(&RAM[0x800F0EB0 & 0xFFFFFF]) >= 0x780)
		{
			// Flush Buffer
			//samDecompression.FUN_0004f480(RAM, 0x801291A0, 0x000001C0);
			//samDecompression.FUN_0004f480(RAM, 0x801291A0, 0x000001C0);

			unsigned long outputSpot = 0x80138B90;
			
			int copySize = CSharedFunctions::CharArrayToLong(&RAM[0x800F0EB0 & 0xFFFFFF]) * 4;
			if (copySize > 0x1000) // first time around reporting too high
				copySize = 0x1000;
			if (sndCpyAmount < 0x220)
				copySize = (int)((double)0x1000 * ((double)sndCpyAmount / (double)0x220));
			memcpy(&result[resultSize], &RAM[0x80138B90 & 0xFFFFFF], copySize);
			resultSize += copySize;

			for (int y = 0x80138B90; y < 0x80138B90 + copySize; y++)
				RAM[y & 0xFFFFFF] = 0;

			// Set back to 0 so it starts at beginning output buffer?
			CSharedFunctions::WriteLongToBuffer(RAM, 0x800EFE60, 0x100);
			CSharedFunctions::WriteLongToBuffer(RAM, 0x800F0EB0, 0x0);
		}
	}

	sfxLength = resultSize / 2;
	unsigned char* tempProcessedBuffer = new unsigned char[sfxLength];
	int spot = 0;
	for (int x = 0; x < resultSize; x+=4)
	{
		tempProcessedBuffer[spot] = result[x + 3];
		tempProcessedBuffer[spot + 1] = result[x + 2];
		spot += 2;
	}

	data = new unsigned char[sfxLength];
	memcpy(data, tempProcessedBuffer, sfxLength);

	if (outputWavStr != "")
		SaveProcessedWav(tempProcessedBuffer, sfxLength, 5, samplingRateFloat, outputWavStr);

	delete [] tempProcessedBuffer;

	delete [] result;
	delete [] RAM;

	return true;
}

std::vector<EBSoundIdx> CExciteBikeSAMAudioDecompression::GetSoundIndexes(unsigned char* outputSfx, int sfxOffset, unsigned long bigRawStart)
{
	std::vector<EBSoundIdx> ebSoundIndexes;
	unsigned long idxCount = CSharedFunctions::CharArrayToLong(&outputSfx[sfxOffset]);

	for (int x = 0; x < idxCount; x++)
	{
		unsigned long offset = sfxOffset + 4 + (x * 0x14);
		EBSoundIdx ebSoundIndex;
		ebSoundIndex.index = CSharedFunctions::CharArrayToLong(&outputSfx[offset]);
		ebSoundIndex.offset = bigRawStart + CSharedFunctions::CharArrayToLong(&outputSfx[offset + 4]);
		ebSoundIndex.size = CSharedFunctions::CharArrayToLong(&outputSfx[offset + 8]);
		ebSoundIndex.flags = CSharedFunctions::CharArrayToLong(&outputSfx[offset + 0xC]);
		ebSoundIndex.hash = CSharedFunctions::CharArrayToLong(&outputSfx[offset + 0x10]);
		ebSoundIndexes.push_back(ebSoundIndex);
	}
	return ebSoundIndexes;
}